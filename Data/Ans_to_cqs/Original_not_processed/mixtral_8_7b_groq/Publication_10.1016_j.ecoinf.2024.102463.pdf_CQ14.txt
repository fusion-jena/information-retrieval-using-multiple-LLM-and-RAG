Answer:::

The hyperparameters of the model are optimized using the Hyperband algorithm, which is a hyperparameter optimization method based on the "successive halving" strategy. The Hyperband algorithm is designed to explore multiple configurations in parallel while allocating more training resources to promising configurations, thus enabling a more efficient search of the hyperparameter space, particularly when computational resources are limited.

The Hyperband algorithm begins with an initial random sampling of a set of hyperparameters for model architectures. During the training of the model, the data is standardized, and one of the datasets is defined as a training base, on which the standardization parameters are calculated and applied to the other two datasets considered as test bases. The best result of the optimization allows determining the base that will be used for training.

The Hyperband algorithm combines an initial random search with a "successive halving" strategy to quickly identify promising configurations while eliminating those that show inferior performance. The "successive halving" strategy involves grouping the remaining configurations into sets of different sizes and training the associated models further. The best-performing configurations in each set are promoted to the next stage, while the underperforming configurations are eliminated. This process is repeated until only one configuration remains, which is then considered the best configuration found.

The Hyperband algorithm is available on the Keras library and is used in the described process to determine the best set of hyperparameter values. The optimization is an iterative process that often involves testing several combinations of values for each hyperparameter to find the best values for the specific task.

Therefore, the hyperparameters of the model are optimized using the Hyperband algorithm, which is a hyperparameter optimization method based on the "successive halving" strategy. The Hyperband algorithm combines an initial random search with a "successive halving" strategy to quickly identify promising configurations while eliminating those that show inferior performance.