Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

2.3. Implementation and training 

The  CNN  was  implemented  using  the  Keras  (Chollet,  2015)  and 
TensorFlow  (Abadi  et  al.,  2016)  software  packages  implemented  in 
Python, and computation was performed using CUDA version 9.1 and 
CuDNN  with  Nvidia  (Nvidia  Corp.,  Santa  Clara,  California)  P100 
accelerator cards with 12 GB of GPU memory. We used a Keras imple-
mentation of EfficientNet–B4 called EfficientNet V1.1.0 (https://github. 
com/qubvel/efficientnet).  The  pre-trained  weights  used  for  transfer 
learning were available through this API.

2. Methods 

2.1. CNN training data

We found that the use of transfer learning when training our CNNs 
was crucial for their performance. Transfer learning is a common tech-
nique within deep learning, where networks trained to perform well on 
one  task  can  be  adapted  with  some  training  towards  similar  tasks 
(Yosinski et al., 2014). This is especially useful when datasets are sparse 
and more narrowly distributed. Often, a significant benefit can be gained 
by starting from a pre-trained network where the first and intermediate 
layers in the network already have been shaped by training on a large 
and  diverse  dataset.  EfficientNet  is  available  pretrained  on  the  large 
benchmark dataset, ImageNet, containing around 1.4 million images in 
1000 classes (Deng et al., 2009), more than 100 times the number of 
labelled salmon scale images used in this study. The network's ability to 
abstract lower level but more generally useful features has then already

Data availability 

Salmon scale 9056 image dataset: 
doi:10.21335/NMDC-1050865887 
Expert  reading  of  extra  150 

335/NMDC-1462728994 

image  dataset:  doi:10.21 

CNN based architecture: EfficientNet: https://github.com/qubvel/ 

efficientnet 

Pre-trained  network  weights  (EfficientNet–B4):  https://github. 

com/qubvel/efficientnet/blob/master/efficientnet/weights.py 

Declaration of Competing Interest 

The authors declare that they have no known competing financial 
interests or personal relationship that could have appeared to influence 
the work reported in this paper. 

Acknowledgements 

We gratefully acknowledge valuable advice on the CNN architecture 
provided by Hyeongji Kim from the Institute of Marine Research, Ber-
gen, Norway. This project was funded in part by Research Council of 
Norway  projects  270966/O70  (COGMAR  -  Ubiquitous  cognitive com-
puter vision for marine services). 

References

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Unfortunately, there isn't enough information in the given context to determine which specific optimization technique was used in the deep learning pipeline. However, it does mention that the Convolutional Neural Network (CNN) was implemented using the Keras and TensorFlow software packages, both of which support various optimization algorithms such as Stochastic Gradient Descent (SGD), Adam, RMSprop, etc. Therefore, one of these optimization techniques might have been employed during the training process.