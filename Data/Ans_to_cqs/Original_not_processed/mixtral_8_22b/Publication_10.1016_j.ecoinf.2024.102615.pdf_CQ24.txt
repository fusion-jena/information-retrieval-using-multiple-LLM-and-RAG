Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

2.1.3. Data partition 

The raw dataset was randomly shuffled, after which the shuffled data 
were divided into training, validation, and test sets. The training set was 
used to learn the parameters of the model during the training process, 
and the validation set was used to evaluate the modeling and tune its 
hyperparameters. Finally, the performance and generalizability of the 
optimal model were evaluated using the test set. The data partitioning 
ratio between the training, validation, and test sets was set as 8:1:1 and 
the random partition was repeated ten times to reduce the influence of 
random splitting while ensuring converged performance (Geras et al., 
2017). 

2.2. MLP model and model assessments 

2.2.1.

Introduction of MLP

EcologicalInformatics81(2024)1026153M. Zhou et al.                                                                                                                                                                                                                                   

Fig. 3. The performance optimization of the MLP model.  

Table 1 
Hyperparameters tuning ranges.  

Hyperparameters 

Type 

Tuning range 

The number of neural network layers 
The number of neurons per layer 
Dropout 
Learning rate 
Batch size 

Integer 
Integer 
Float 
Float 
Integer 

1â€“5 
64, 128, 256, 512, 1024, 2048 
0.1, 0.25, 0.35, 0.5 
0.001, 0.0001, 0.00001 
32, 64, 128, 256  

Table 2 
the optimal MLP architecture and parameters.  

Layer type 

Input 
Dense 
Batch normalization 
Dropout 
Dense 
Batch normalization 
Dropout 
Dense(output) 
Total parameters 

Layer size 

4200 
2048 
2048 
2048 
1024 
1024 
1024 
1 
10,715,137  

Parameters 

0 
8,603,648 
8192 
0 
2,098,176 
4096 
0 
1025

the percentage value of the dropout layers, the learning rate, and the 
batch size, the optimal model was obtained with an R value of 0.76.

After reviewing the literature, the default model was determined as 
the starting point for exploring MLP modeling. The specific structural 
parameters  of  the  default  MLP  model  can  be  referred  to  (Fine  et  al., 
2020). After optimization, the optimal MLP model was used to predict 
soil  Mn  content.  Table  2  briefly  summarizes  the  optimal  network 
structure  and  parameters.  Briefly,  the  batch  normalization  technique 
was used to accelerate the learning process (Ioffe and Szegedy, 2015), 
after which the dropout was employed to mitigate model overfitting. To 
train the MLP model, we applied the Adam optimizer with a learning 
rate of 0.0001, and used a batch size of 32 (Khan et al., 2020). The ReLu 
activation function was used in the network architecture and the early 
stopping mechanism was used to minimize overfitting (Prechelt, 1998). 
Fig. 4 shows the overall structure of the network, which comprises i)

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What strategies are employed to handle randomness in the deep learning pipeline (e.g., random seed value)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
To handle randomness in the deep learning pipeline, such as the random seed value, several strategies are employed. In this case, the authors use two main approaches to address this issue. First, they perform multiple runs of their experiments by repeating the random partition of the data into training, validation, and test sets ten times. This repetition helps ensure that the results are not influenced by any particular random split and allows them to achieve more consistent and reliable performance. Second, they employ techniques like batch normalization and dropout within their MLP model to improve the stability and robustness of the learning process. These methods help prevent overfitting and enhance the model's ability to generalize well on unseen data. Additionally, the choice of hyperparameters, such as the learning rate and batch size, also plays a role in managing randomness and improving the overall performance of the deep learning pipeline.