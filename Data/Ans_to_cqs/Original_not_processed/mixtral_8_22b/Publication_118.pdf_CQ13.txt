Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

At this timescale we found that our auto-encoders with smaller feature 
representations were outperformed by MFCC. Our testing on data that 
the model has not seen before, suggests that once it is likely to be able to 
be  reused,  with  minimal  (or  without)  retraining.  Once  trained,  it  is 
possible  to use our auto-encoder to  generate features on a  mid range 
laptop. Computation times to generate acoustic indices, mfcc and our 
feature representation can be seen in Table 4.

For  deep  learning  tasks  you  often  start  from  a  point  of  labelling 
training your data. However this can be slow and problematic. It can be 
useful to have a general representation for machine learning, that does 
not  rely  on  labeled  data  or  domain  specific  features.  This  paper  will 
focus on the use of auto-encoders for automatic feature extraction. First 
we  will  explore  the  relevant  literature,  then  explain  our  method  for 
automatically learning features, our method for comparing with other 
feature  representations,  results,  and  finally  our  discussion  and 
conclusions. 

The outcome of this research is an alternative method for analysing 
eco-acoustic  data.  It  will  be  of  significance  to  the  fields  of  Machine 
Learning and Soundscape Ecology. This research will be of direct benefit 

* Corresponding author. 

E-mail address: benjamin.rowe@hdr.qut.edu.au (B. Rowe).

The autoencoder based on explicit max-pooling consists of a 128x128x3 
input layer, and 4 convolutional layers using 3 × 3 pixel kernels, stride 
of 1 pixels and zero padding of 1 pixel on each but the first layer, and 4 
max-pooling layers using 4 × 4 pixel kernels, stride of 2 pixels and zero 
padding of 1 pixel. The encoder’s output is then flattened to produce a 
384x1x1  feature  vector.  The  decoder  network  accepts  the  384x1x1 
feature vector produced by the encoder network as its input, and consists 
of 4 convolutional layers with a 3 × 3 kernel, stride of 1 pixel and zero 
padding of 1 pixel on each layer except the last, and 4 max-unpooling 
layers using 4 × 4 pixel kernels, stride of 2 pixels and zero padding of 
1 pixel, which produces a 128x128x3 output.

3.3. Network architecture 

The architecture used was a heavily modified version of that used in 
“Unsupervised Deep Learning with Pytorch” by github user “eelxpeng” 
(eelxpeng, 2018). As the size of our audio spectrograms has been con-
strained to 128 × 128 pixel RGB images with values repeated in each 
color channel to produce a greyscale image. For this initial experiment 
testing  the feasibility of using an auto-encoder-generated feature rep-
resentation for ecoacoustic analysis, we chose a basic auto-encoder ar-
chitecture  to  minimise  the  complications  that  may  be  introduced  by 
more advanced architectures. A rectified linear unit (ReLU) based acti-
vation function was be used, to help mitigate the vanishing/exploding 
gradient  problem  (Xu  et  al.,  2015).  Networks  using  implicit  pooling 
(determined using pytorch) and explicit max-pooling were used.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the hyperparameters used in the deep learning model (e.g., learning rate, optimizer)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:

Based on the given information, there is no mention of the specific hyperparameters such as learning rate or optimizer used in the deep learning model. However, some details about the architecture of the autoencoder are provided. The autoencoder uses a 128x128x3 input layer and four convolutional layers with 3x3 pixel kernels, a stride of 1 pixel, and zero padding of 1 pixel on each layer except the first one. Additionally, four max-pooling layers are employed with 4x4 pixel kernels, a stride of 2 pixels, and zero padding of 1 pixel. The encoder's output is flattened into a 384x1x1 feature vector. The decoder network takes this feature vector as input and comprises four convolutional layers with a 3x3 kernel, a stride of 1 pixel, and zero padding of 1 pixel on each layer except the last one. Four max-unpooling layers are also utilized with 4x4 pixel kernels, a stride of 2 pixels, and zero padding of 1 pixel, resulting in a 128x128x3 output. Furthermore, a ReLU activation function is applied to aid in addressing the vanishing/exploding gradient problem.