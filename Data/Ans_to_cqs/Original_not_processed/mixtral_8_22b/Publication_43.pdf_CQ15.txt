Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Deep CNNs, such as ResNet and GoogLeNet, are generally trained based on the prediction loss
minimization. Let x and y be the input images and corresponding output class labels, the objective of
the training is to iteratively minimize the average loss deﬁned as

J(w) =

1
N

N
∑
i=1

L( f (w; xi), yi) + λR(w)

(1)

This loss function measures how different is the output of the ﬁnal layer from the ground truth.
N is the number of data instances (mini-batch) in every iteration, L is the loss function, f is the
predicted output of the network depending on the current weights w, and R is the weight decay with
the Lagrange multiplier λ. It is worth mentioning that in the case of GoogLeNet, the losses of the

Remote Sens. 2017, 9, 1220

6 of 22

two auxiliary classiﬁers are weighted by 0.3 and added to the total loss of each training iteration.
The Stochastic Gradient Descent (SGD) is commonly used to update the weights.

wt+1 = µwt − α∆J(wt)

(2)

In general, ﬁne-tuning the entire network (i.e., updating all the weights) is only used when the
new dataset is large enough, otherwise, the model could suffer overﬁtting especially among the
ﬁrst layers of the network. Since these layers extract low-level features, e.g., edges and color,
they do not change signiﬁcantly and can be utilized for several visual recognition tasks. The last
learnable layers of the CNN are gradually adjusted to the particularities of the problem and
extract high level features.

In this work, we have used ﬁne-tuning on ResNet and GoogleNet. We initialized the used CNNs
with the pre-trained weights of the same architectures on ImageNet dataset (around 1.28 million
images over 1000 generic object classes) ([13]).

In this work, we considered the two most accurate CNNs, ResNet ([42]) and GoogLeNet ([43]).
ResNet won the ﬁrst place on the 2015 ILSVRC (ImageNet Large Scale Visual Recognition Competition
(ILSVRC)) and is currently the most accurate and deepest CNN available. It has 152 layers and
25.5 million parameters. Its main characteristic with respect to the previous CNNs is that ResNet
creates multiple paths through the network within each residual module. GoogLeNet won the ﬁrst
place of the 2014 ILSVRC. GoogLeNet is based on inception v3 and has 23.2 million parameters and
22 layers with learnable weights organized in four parts: (i) the initial segment, made up of three
convolutional layers, (ii) nine inception v3 modules, where each module is a set of convolutional and
pooling layers at different scales performed in parallel then concatenated together, (iii) two auxiliary
classiﬁers, where each classiﬁer is actually a smaller convolutional network put on the top of the

wt+1 = µwt − α∆J(wt)

(2)

where µ is the momentum weight for the current weights wt and α is the learning rate.

The network weights, wt, can be randomly initialized if the network is trained from scratch.
However, this is suitable only when a large labeled training-set is available, which is expensive in
practice. Several previous studies have shown that data-augmentation ([44]) and transfer learning ([45])
help overcoming this limitation.

•

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Answer: In the given context, it is mentioned that the Stochastic Gradient Descent (SGD) is commonly used to update the weights in Deep Convolutional Neural Networks (CNNs). This technique is employed during the fine-tuning process of networks like ResNet and GoogLeNet. These networks are initially trained using the ImageNet dataset, but their weights are updated to adapt them to new datasets or specific problems.

The equation provided for updating the weights is:

wt+1 = µwt - α∆J(wt)

Here, wt represents the current weights, µ is the momentum weight, α is the learning rate, and ∆J(wt) denotes the gradient of the loss function J with respect to the current weights.

Although the context does not explicitly discuss other optimization techniques like Adam, it focuses primarily on the use of SGD in the deep learning pipeline. However, it should be noted that various optimization methods exist beyond those mentioned here, including Adam, Adagrad, and RMSprop, among others. Each method has its own strengths and weaknesses, making them more or less suitable for certain applications.