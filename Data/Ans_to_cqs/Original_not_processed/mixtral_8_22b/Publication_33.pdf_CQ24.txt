Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Whatever the goal, our framework is highly flexible and can be adapted by tuning the species thresholds 
regulating the trade-off between classification robustness and coverage in an attempt to monitor biodiversity 
through big datasets where species are unidentified. To unclog the bottleneck of information extraction about 
organism forms, behaviors and sounds from massive digital data, machine learning algorithms, and particularly 
the last generation of deep learning algorithms, offer immense promises. Here we propose to help the users to 
control their error rates in ecology. This is a valuable addition to the ecologist’s toolkit towards a routine and 
robust analysis of big data and real-time biodiversity monitoring from remote sensors. With this control of error 
rate in the hands of users, Deep Learning Algorithms can be used for real applications, with acceptable and 

Scientific RepoRtS  |        (2020) 10:10972  | 

https://doi.org/10.1038/s41598-020-67573-7

11

to calibrate Deep Learning models using a single parameter for all  classes35. This parameter is used, instead of 
the traditional softmax function, to convert the vector output from the neural network into a real probability.

Processing data from surveys using photos or videos remains a major bottleneck in ecology. Deep 
Learning Algorithms (DLAs) have been increasingly used to automatically identify organisms on 
images. However, despite recent advances, it remains difficult to control the error rate of such 
methods. Here, we proposed a new framework to control the error rate of DLAs. More precisely, 
for each species, a confidence threshold was automatically computed using a training dataset 
independent from the one used to train the DLAs. These species-specific thresholds were then used to 
post-process the outputs of the DLAs, assigning classification scores to each class for a given image 
including a new class called “unsure”. We applied this framework to a study case identifying 20 fish 
species from 13,232 underwater images on coral reefs. The overall rate of species misclassification 
decreased from 22% with the raw DLAs to 2.98% after post-processing using the thresholds defined to

training datasets.

•  In the first phase, a classification model is built by training a CNN on a given database T0 (Fig. 2a)
•  Then, the second phase consists of tuning a risk threshold τi specific to each class (i.e. each species in our 

case), noted i, with i ∈ {1, ..., n} , using a second and independent database noted T1 (Fig. 2b).

In terms of classification, it means we transform the 2 classification options (correct, wrong) in 3 options 

(Fig. 3) by applying Eqs. (15, 16).

Computing the confidence thresholds.  After the phase 1 (model training phase), for an image X of the 
threshold tuning dataset processed by the classifier, we obtain an output {C(X), S(X)} , where C(X) is the class 
(i.e. species, belonging to the trained set of species) with the highest classification score S(X). For this image, we 
know the ground truth Y in {1, .., n} belonging to the same set of species classes.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What strategies are employed to handle randomness in the deep learning pipeline (e.g., random seed value)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The provided context does not explicitly discuss strategies to handle randomness in the deep learning pipeline, such as managing random seed values. However, based on general practices in machine learning, some common strategies include setting fixed seeds for reproducibility, using techniques like cross-validation to reduce variability due to random sampling, and employing ensemble methods to combine multiple models trained with different initializations.