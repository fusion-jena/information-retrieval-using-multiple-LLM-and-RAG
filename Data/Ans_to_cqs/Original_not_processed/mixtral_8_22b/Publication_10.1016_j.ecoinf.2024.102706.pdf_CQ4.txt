Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

and time overhead (Ke et al., 2017). LightGBM sets itself apart from
other tree-based methods through its leaf-wise splitting approach, which
generates more intricate trees. These trees are adept at minimising loss,
leading to enhanced accuracy. The splitting process is guided by a
unique sampling method called Gradient-Based One Side Sampling
(GBOSS) (Ke et al., 2017). This method excludes data with small gra-
dients while utilising the remainder for estimating information gain and
facilitating tree growth. A collection of hyperparameters, such as lear-
ning_rate, max_depth, bagging_fraction, bagging_freq, and n_estimators,
controls the algorithm. These parameters are crucial in shaping how the
leaves are structured within the trees. The model's complexity gradually
rises as the tree grows, guided by these parameters. Simultaneously, loss
decreases, and the algorithm becomes more adept at learning from the
data, thereby improving its efficiency. Moreover, this model is suscep-

approach (Li et al., 2022) have also been efficiently used in satellite
image-based vegetation indices for predicting forest canopy cover. The
application of deep convolutional neural networks (DCNN) for semantic
segmentation has also been investigated across various types of young
vegetation cover (Cameron et al., 2022). Regarding advanced machine
learning approaches, the RF and SVM were the foremost priorities for
the researchers for canopy cover modelling from O'brien, 2007 to 2017,
as reported by Thanh Noi and Kappas (2017). Other advanced ML ap-
proaches have recently been added to similar studies (Li et al., 2022;
Zhou et al., 2020). The boosting methodology represents a synthesis of
robust prediction techniques, frequently surpassing the performance of
individual models such as single decision trees. The emergence of
refined ensemble machine learning techniques like light gradient
boosting machines
represents notable advancements

tible to overfitting; therefore, it is crucial to address this issue by tuning
the hyperparameters.

verages bagging over boosting. This implies that RF constructs trees
independently and amalgamates their forecasts, a strategy that may
prove less efficacious in capturing intricate patterns when compared
with boosting techniques like LightGBM and XGboost. Both LightGBM
and XGboost stand out as potent gradient boosting models, each char-
acterised by unique variances in their tree growth strategies - leaf-wise
and tree level-wise, respectively. LightGBM specifically emphasises
expeditious training performance through the selective sampling of
high-gradient instances within extensive datasets, high-dimensional
data sets, and categorical attributes, owing to its employment of
histogram-based segmentation and adept management of categorical
variables (Al Daoud, 2019).

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the data augmentation techniques applied in the deep learning pipeline (e.g., Fliping, Roating, Scaling)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The given context does not provide specific details about the data augmentation techniques applied in the deep learning pipeline. However, generally speaking, common data augmentation techniques include flipping, rotation, scaling, cropping, translation, and noise injection. These techniques help increase the amount of training data available, improve model robustness, and prevent overfitting. For instance, image flipping involves creating new images by horizontally or vertically flipping existing ones. Rotation entails rotating images by a certain degree, while scaling adjusts the size of images. Cropping involves removing parts of an image, and translation shifts the position of objects within an image. Lastly, noise injection adds random noise to input features to enhance model generalization.