Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Evaluation on Simulated Data Sets
DEPP training and parameter sensitivity.—We start by
evaluating DEPP on simulated data sets, testing the
ability to train the CNN model in reasonable times. As
the training epochs advance, the loss function (1) drops
rapidly and stabilizes after around 500 epochs in a typical
case (Fig. S1 of the Supplementary material available on
Dryad). Here, training, which is a one-time process for
each reference tree, ﬁnished in around 20 min for the 200-
taxon data set and 260 minutes for 10,000-taxon data set,
on a machine with one 2080Ti NVIDIA GPU and 8 CPU
cores. Placement of 1000 queries took 4 seconds for the
200-taxon and 30 s for the 10,000-taxon data sets using a
single CPU core. On the small 200-taxon data set, EPA-ng
has an advantage in terms of running time. However, in
the larger HGT data set (10,000-taxon), DEPP placements
are faster than the alternatives with half the running time
of EPA-ng. In terms of the memory usage, APPLES+JC

Embedding size. The Layer and Rhodes (2017) (LR)
formulation requires n
1 dimensions, which introduces
some challenges. According to the theory, the number of
dimensions needs to increase by one after inserting the
query. Our supervised learning formulation does not
allow that (the embedding size is ﬁxed after training).
Thus, there is no guarantee that the embeddings remain
correct after addition, even if they are before addition.
However, we note that, in LR embeddings, adding a
leaf would require simply dividing one of the n
1
dimensions into two dimensions, leaving the rest of the
embeddings intact. Thus, one can hope that having one
less dimension has a minimal practical impact. More
broadly, for large n, training models with n-dimensional
embedding is impractical. Thus, we often set k < n
1,
and the gap can be more than an order of magnitude for
some of our tests described below. In practice, we use a
rule of thumb to select the default k (which the user can

reducing the embedding size to 32 reduce the accuracy
signiﬁcantly (Table S2 of the Supplementary material
available on Dryad). In our ﬁnal model, we use ﬁve
residual blocks for backbone tree with 200 taxon and
one residual block for the rest of data set to trade-
off performance and training time. Note that while
the preliminary results motivated the choice of default
settings used in the rest of analyses, we did not select
the optimal settings for this data set and have not tested
various settings on other data sets (thus, hyperpara-
meters are not overﬁt to the data). The use of the gap
reconstruction model dramatically improves accuracy
when the query has 40% or more gaps, and the use of
the weighted approach results in further reductions in
error (Fig. S17 of the Supplementary material available
on Dryad).

by a running average of its recent magnitude to speed
up training (Tieleman and Hinton 2012). The batch size
is ﬁxed to 32. We check the training loss every 50 epochs
and stop the training when the value of the loss function
fails to decrease in two consecutive checks. The model
with the optimal objective function value is chosen.

{

=

=

n
i

n
i

Di}
{

DR
i }

1 and

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What measures were taken to ensure the generalizability of the deep learning model (e.g., Diverse dataset, cross-validation, Stratified splitting)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The text does not provide explicit information about specific measures taken to ensure the generalizability of the deep learning model, such as using diverse datasets, cross-validation, or stratified splitting. However, it mentions that the authors did not select the optimal settings for their data set and have not tested various settings on other data sets. This suggests that they may have avoided overfitting the model to their particular dataset, which could improve its generalizability. Additionally, the authors mention using a rule of thumb to select the default k (embedding size) and choosing the final model based on the optimal objective function value. These practices might contribute to the robustness and applicability of the model across different scenarios.