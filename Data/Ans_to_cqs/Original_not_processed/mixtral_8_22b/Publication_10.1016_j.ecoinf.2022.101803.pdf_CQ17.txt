Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Parameter  estimation  with  ML  can  be  susceptible  to  over-fitting, 
especially for sparse and noisy data. This can be addressed with regu-
larization,  where  a  penalty  term  that  quantifies  model  complexity  is 
added  to  the  log  likelihood;  see  e.g.  Section  3.2  in  Bishop  (2006).  A 
particular form of regularization is ridge regression, where the model 
coefficients are shrunk towards smaller values by altering the ML cri-
terion to include a penalty term based on the weighted L2 norm of the 
parameter vector: 
(cid:0)

)
θ, z, y

l

(cid:0) λ‖θ‖2

(16)

While  the  ensemble  size  for  bagging  is  not  particularly  critical, 
provided it is sufficiently large (500 is a widely used default value), it 
does  matter  for boosting.  In  XGBoost, large  ensemble  sizes  can  cause 
over-fitting because the gradient technique focuses on the most difficult 
cases,  which  can  be  due  to  noise.  To  avoid  the  over-fitting  issue  in 
XGBoost, we use a nested k-fold cross-validation scheme. We split each 
dataset into 3 subsets: the tuning set (k-2 folds), validation set (1-fold), 
and test set (1-fold). For each choice of number of iterations and each 
fold, we train the model on the tuning set and monitor the performance 
on the validation set by calculating the out-of-sample prediction accu-
racy and taking the median of k-1 folds. This gives us k medians for each 
number of iterations, as explained in Algorithm 1 and shown in Fig. S2 in 
Supplement A.3.  

Algorithm 1 Optimize the iteration number 

for each k-1 folds do

3.2. Calibration and regularization

regularisation, confirming similar findings in Machine Learning litera-
ture (Sollich and Krogh, 1996). The combination of the proposed RBF- 
GFR  model  with  random  forests  (RBF-GFR-RF)  produced  the  best 
model  overall,  consistently  achieving  a  place  in  the  top  three  perfor-
mance rankings. An important additional finding was that almost all the 
methods proposed in this study outperform the original GFR model from 
Matthiopoulos et al. (2011), which was the initial aim motivating the 
present work. As shown in Fig. 2, the GFR model never achieves a rank 
better than 6. R2
DEV  in Eq. (18) is generally a better behaved measure-
ment than R2  in Eq. (17) for count data as described in Section 4.2. We 
used R2
DEV to calculate the out-of-sample predictive performance in these 
datasets  as  shown  in  Fig. S9  in  Supplement A.9.  However,  the  overall 
ranks using R2
DEV  are not different from the overall ranks using R2  in Eq.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the regularization methods used to prevent overfitting in the deep learning pipeline (e.g., dropout, L2 regularization)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The text mentions two regularization methods used to prevent overfitting in machine learning models: regularization and ridge regression. Regularization involves adding a penalty term to the log likelihood that quantifies model complexity. Ridge regression is a specific type of regularization where the model coefficients are shrunk towards smaller values by altering the maximum likelihood criterion to include a penalty term based on the weighted L2 norm of the parameter vector. While not explicitly mentioned in the given context, other common regularization techniques used in deep learning pipelines include dropout and L2 regularization. Dropout randomly drops out nodes during training to prevent overfitting, while L2 regularization adds a penalty term to the loss function to discourage large weights. These techniques help improve generalization and reduce overfitting in complex models.