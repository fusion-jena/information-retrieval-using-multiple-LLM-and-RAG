Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

2.5. Model training 

ÔÅ¨  To ensure the accuracy of the experimental results and obtain the best classification, the exact 
parameters  and  functions  as  well  as  classifier  built-in  the  six  neural  network  models  are 
designed as follows: 

ÔÅ¨  The resolution of input data is 224√ó224 with Red Green Blue (RGB) format, and the inputs 

are batch normalized before training; 

ÔÅ¨  Batch size is applied which is set to 30 when training, but images are tested one by one; 
ÔÅ¨  An  optimized  rectified  linear  activation,  Leaky  ReLU,  was  introduced  into  models  after 

convolution or concatenate layer; 

In MobileNet, width multiplier is 1.2, resolution multiplier is 1; 

ÔÅ¨  Learning rate and dropout rate adopt same value 0.001, bias value is 0;  
ÔÅ¨ 
ÔÅ¨  For the neural networks with lower depth, the higher training epochs are, the higher probability 
of over fitting is. Therefor models in which less than 100 layers adhibit raw data 60 epochs, 
otherwise executed 80 epochs;

ÔÅ¨  A fully connected layer with softmax activation has 28 nodes, which is regarded as classifier 

while training but removed when inference. 

2.6. Computational resources and environment 
In this study, the operation system is CentOS Linux release 7.7.1908 (Core) with 32 CPUs and each 
CPU has 64 processors. The develop environment built-up is Python(version 3.6.2) packaged by Conda-
forge which compiled with GCC (version4.8.2,20140120). Tool packages used in virtual environment 
are the TensorFlow (version 1.12.0) and the Numpy (version 1.19.2).

DenseNet: In 2017 Huang et al.[31] proposed a scheme to reduce hyper-parameters and guarantee 
gradient  propagate,  which  aims  to  release  gradient  vanishing  through  feature  reuse  and  bypass. 
DenseNet has a nice mathematical structure and high classification performance, but it needs a long 
computational time.

AlexNet: In 2012, Krizhevsky et al.[28] constructed a model with more convolutional layers than 
LeNet for better high-dimensional feature extraction, and then three fully connected layers are used after 
flatten layer to pool channel information. This model employed rectified linear activation (ReLU) as 
activation  function  to  speed  up  training  process,  which  partially  solved  the  vanishing  gradient  and 
exploding problem. Features of each layer in AlexNet were depicted in Figure 2. Feature visualization 
of  AlexNet  layer  by  layer.  The  annotations  above  are  defined  as  Nameùëë@k√ók,  and  the  annotations 
below  are  denominated  in  form  of  Operationùëë@r√ór.  Where d , k and r is  feature  depth,  convolution 
kernel and image resolution, respectively..

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the hyperparameters used in the deep learning model (e.g., learning rate, optimizer)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The deep learning models used in this study have several hyperparameters. The learning rate and dropout rate are both set to 0.001. The bias value is set to 0. The resolution of the input data is 224x224 with RGB format, and the inputs are batch normalized before training. The batch size is set to 30 during training, but images are tested one by one. An optimized rectified linear activation, Leaky ReLU, is introduced into the models after convolution or concatenate layer. In MobileNet, the width multiplier is 1.2, and the resolution multiplier is 1. The number of epochs varies depending on the depth of the neural network. Models with less than 100 layers use 60 epochs, while others use 80 epochs. A fully connected layer with softmax activation has 28 nodes, which serves as the classifier during training but is removed during inference. However, the specific optimizer used is not mentioned in the given context.