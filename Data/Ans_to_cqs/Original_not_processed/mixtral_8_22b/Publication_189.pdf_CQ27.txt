Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

0.0000e+00; 

The  loss  values  for  training  and  validation  dataset  during 
Mask  R-CNN  training  for  epoch  20  were  obtained  as-  loss: 
0.8241;  rpn_class_loss:  0.3679; 
  rpn_bbox_loss:  0.4562; 
mrcnn_class_loss: 3.1710e-06;  mrcnn_bbox_loss: 0.0000e+00; 
mrcnn_mask_loss: 
0.6051; 
  val_rpn_bbox_loss:  0.1993; 
val_rpn_class_loss:  0.4057; 
val_mrcnn_bbox_loss: 
val_mrcnn_class_loss: 
0.0000e+00; 
0.0000e+00,  where 
training  loss  is  the  sum  of  rpn_class_loss  =  RPN  anchor 
classifier loss, rpn_bbox_loss = RPN bounding box loss graph, 
mrcnn_class_loss = loss for the classifier head of Mask R-CNN, 
mrcnn_bbox_loss  =  loss  for  Mask  R-CNN  bounding  box 
refinement, mrcnn_mask_loss = mask binary cross-entropy loss  

3.2186e-06; 
val_mrcnn_mask_loss: 

val_loss: 

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on September 08,2024 at 12:02:05 UTC from IEEE Xplore.  Restrictions apply. 

37

This  system  is  most  compatible  with  tensorflow  version 
1.14.0 and keras version 2.2.4 along with python 3.6. This model 
has been implemented on a machine with 1 GPU which uses 1 
Image per GPU and batch size for mrcnn training is  taken as a 
product of GPU and Images per GPU. The system used resnet 
50 and resnet 101 as backbone structures and used anchor boxes 
of ratio 32, 64, 128, 256, 512. The width and height of images 
in  this  research  is  fixed,  therefore  [a,640,640,3]  becomes  the 
image  shape  here  and  [a,640,640,1]  becomes  the  mask  shape 
where  a  is  the  number  of  training  images  and  true  masked 
images. For training on Mask R-CNN, 20 epochs with 500 steps 
each  are  being  used  for  training  images  and  100  steps  for 
validation images while evaluating the model. The learning rate, 
 used for heads layer training  has been  taken as 0.001 while 
during  all  layers  training    decayed  by  10.  For  weight

[26]  Chang, Chih-Chung and Chih-Jen Lin. “LIBSVM: A library for support 
vector machines.” ACM Trans. Intell. Syst. Technol. 2 (2011): 27:1-27:27. 
[27]  Poojary, Ramaprasad & Raina, Roma & Mondal, Amit Kumar. (2020). 
Effect  of  data-augmentation  on  fine-tuned  CNN  model  performance. 
IAES  International  Journal  of  Artificial  Intelligence  (IJ-AI).  10. 
10.11591/ijai.v10.i1.pp84-92. 

[28]  IKKAKU Project-https://ikkaku.lne.st/en/vision/ 

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on September 08,2024 at 12:02:05 UTC from IEEE Xplore.  Restrictions apply. 

38

[12]  Wu,  H.,  Zhang,  J.,  Huang,  K.,  Liang,  K.,  &  Yu,  Y.  (2019).  FastFCN: 
the  Backbone  for  Semantic 

Rethinking  Dilated  Convolution 
in 
Segmentation. ArXiv, abs/1903.11816. 

[13]  K.  He,  G.  Gkioxari,  P.  Dollár  and  R.  Girshick,  "Mask  R-CNN," 2017 
IEEE  International  Conference  on  Computer  Vision  (ICCV),  2017,  pp. 
2980-2988, doi: 10.1109/ICCV.2017.322. 

[14]  Ronneberger  O.,  Fischer  P.,  Brox  T.  (2015)  U-Net:  Convolutional 
Networks for Biomedical Image Segmentation. In: Navab N., Hornegger 
J., Wells W., Frangi A. (eds) Medical Image Computing and Computer-
Assisted Intervention – MICCAI 2015. MICCAI 2015. Lecture Notes in 
Computer Science, vol 9351. Springer, Cham.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What process was followed to deploy the trained deep learning model (e.g., Model serialization, Platform selection)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:

Unfortunately, the given context does not provide information about the specific process followed to deploy the trained deep learning model. However, based on common practices in deploying deep learning models, we can infer some possible methods.

Model Serialization: After training the Mask R-CNN model, it would typically be saved or serialized into a file format such as.h5 or.pb using TensorFlow's built-in functions like `model.save()`. This allows the model to be loaded later without retraining.

Platform Selection: Depending on the application requirements, the platform for deployment could vary. Some popular choices include cloud platforms like AWS, Google Cloud, Azure, etc., or edge devices like Jetson Nano, Raspberry Pi, etc.

Deployment Process: Once the model is serialized and the platform is selected, the next step would involve setting up the environment on the chosen platform. This might require installing necessary libraries and dependencies. Then, the serialized model would be loaded onto the platform and integrated with any other components required for the application. Finally, testing should be performed to ensure everything works correctly before full-scale deployment.