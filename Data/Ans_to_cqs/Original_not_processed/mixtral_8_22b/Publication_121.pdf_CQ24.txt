Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Various research studies, reviewed in the next section, aimed
at deep learning methods for plant species identiﬁcation. How-
ever, these studies focused on utilizing complex deep models,
such as InceptionV3, AlexNet, and VGG-16, which require a
considerable number of iterations and computation power to
train the network. Moreover, the existing plant identiﬁcation
applications such as PictureThis [11] and Pl@ntNet [12] de-
pend upon the network connection to evaluate the captured im-
age by analyzing trained models on servers. These applications
fail in remote forestry areas where mobile networks provide
limited/no patchy connection [13]. Due to low power and
computation capabilities, a model with reduced computation

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

optimizer (SGD) with a learning rate of 0.5 and momentum
of 0.9. All models were trained on a training set within 10
and 100 epochs (iterations).
Fine-Tuning: We un-froze the base models and trained the
weights of the top layers of these models along with the
classiﬁer layer added in the previous step. The models were
trained in 10 iterations to force the weights to be tuned from
generic feature maps to feature associated with the leaf dataset.
For a fair comparison, both V2 and V3 models were trained
with the same dataset and training parameters, i.e. 235,704.
The models were ﬁne-tuned and re-evaluated. The models
were saved in the machine with all the class labels.

App Development: For tree species identiﬁcation in a remote
area, an end-user app is essential. For the app development,
Android Studio [39] was used. The saved models were
converted into the TensorFlow Lite [40] version using the
TensorFlow Lite converter. TensorFlow Lite is a set of tools
to perform deep learning on smartphone and IoT devices. The
architecture of the mobile app is shown in Fig. 4. The squares
marked with dotted red will be included in future iterations.
The size of the models based on MobileNetV3-Large and
MobileNetV3-Small was 4.88 MB and 1.99 MB, respectively,
which are lightweight compared to AlexNet (227.5 MB) [27].
The app is developed using the Java programming language.
The leaf detection module in the app contains a Tensorﬂow
Lite interpreter for the TensorFlow Lite model.
App Testing: For testing the application, Android studio
comes with built-in phone emulators, or the app could be
deployed to an actual device. From an online search, we

Our ﬁndings reveal that using MobileNetV3 transfer learning,
accuracy up to 90% can be achieved within fewer iterations
than end-to-end CNN-based models for plant identiﬁcation. The
lightweight model comes with reduced computation that runs
independently within a smartphone application without internet
access, ideal for tree species identiﬁcation in rural forests.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What strategies are employed to handle randomness in the deep learning pipeline (e.g., random seed value)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:

In the given context, there isn't any explicit mention of strategies employed to handle randomness in the deep learning pipeline, specifically related to the random seed value. However, some general practices can be discussed.

Randomness in deep learning pipelines often arises due to various factors like weight initialization, data shuffling, dropout regularization, etc. To manage this randomness and ensure reproducibility, one common strategy is setting a fixed random seed value. This ensures that every time the code is run, it produces the same results, making experiments more reliable and comparable.

In Python, for instance, libraries like NumPy and PyTorch allow users to set a specific seed value. By calling `numpy.random.seed(seed_value)` or `torch.manual_seed(seed_value)`, the user can control the randomness in their respective operations.

However, it should be noted that while fixing the seed value helps in reproducing results, it might also limit the exploration of different possible solutions during the training process. Therefore, it's crucial to understand when to fix the seed and when not to do so.

Unfortunately, the provided context does not discuss these aspects directly. It primarily focuses on employing MobileNetV3 transfer learning for plant identification, comparing its performance against other models, and developing an offline smartphone application for tree species identification in remote areas.