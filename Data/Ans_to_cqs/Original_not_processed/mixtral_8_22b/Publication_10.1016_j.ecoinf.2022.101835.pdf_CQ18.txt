Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

et al., 2016), and LightGBM 3.2.1 (Ke et al., 2017) libraries. In building a 
machine  learning  model,  the  structure  and  hyperparameters  of  the 
model must be determined, such as the number of decision trees and the 
depth of trees for RF models and the number of intermediate layers and 
nodes for ANN models. We optimized the structure and hyperparameters 
of the RF and ANN models using Optuna 2.10.0 (Akiba et al., 2019) with 
the  parameters  and  ranges  shown  in  Table  1  as  candidates.  For  the 
LightGBM models, we used Optuna's LightGBM Tuner (optuna.integra-
tion.lightgbm)  for hyperparameter  fitting.  The  performance of  the  al-
gorithms was evaluated by comparing the loss function (mean squared 
error (MSE)) of the optimized models. In addition, the mean absolute 
error (MAE) and the coefficient of determination (R2) were calculated 
for reference.

Next, the first flowering and full blossom dates for each station and 
year were calculated using the optimized models. Finally, the root mean 
square error (RMSE) was calculated for all observation sites to evaluate 
the overall performance of the optimized models, and the RMSE for each 
observation  site  was  calculated  to  evaluate  the  performance  of  the 
models for each site. 

2.4. Understanding the machine learning models using SHAP values

bagging_freq 
min_child_samples 

int, 1 to 20 
int, 0 to 5  
int, 10, 20, … 
100  
int, 10, 20, … 
100  
ReLu or 
linear  
Adam or 
RMSprop 

Maximum depth of the tree 
Number of middle layers 
Number of nodes in the 
input layer 
Number of nodes in the 
middle layers 
Activation function in the 
input and middle layers 
Optimizer 

Maximum tree leaves for 
base learners   
L1 regularization   
L2 regularization   
A subset of features on each 
iteration (tree)   
Randomly select a part of 
data without resampling   
Frequency for bagging   
Minimal number of data in 
one leaf   

AA SHAPj =

1
ni

∑
⃒
⃒SHAPi,j

⃒
⃒

i

(1)  

where AA_SHAPj  is the average of the absolute SHAP values for input 
variable j (i.e., the daily average temperature on day j), ni is the number 
of response values (4844 for the first flowering date models and 4814 for 
the full blossom date models), and SHAPi,j is the SHAP value for the jth 
input parameter of the ith response value.

n_estimators = 92, 
max_depth = 15 
num_layer = 0, 
units (initial layer) = 90, 
units (middle layers) = 60, 
activation = ReLu, 
optimizer = Adam 
num_leaves = 31, 
lambda_l1 = 0 
lambda_l2 = 0 
feature_fraction = 0.5 
bagging_fraction = 0.573 
bagging_freq = 7 
min_child_samples = 20 

0.0530 

0.175 

0.942 

0.0429 

0.156 

0.958 

0.0381 

0.148 

0.964  

0.0586 

0.175 

0.940 

0.0485 

0.170 

0.951 

0.0424 

0.158 

0.955  

EcologicalInformatics71(2022)1018353Y. Masago and M. Lian                                                                                                                                                                                                                       

0.965,  respectively),  followed  by  the  ANN  and  RF  models,  while  the 
differences  were  not  significant.  The  optimized  ANN  models  did  not 
have any intermediate layers, and the model with the input layer fol-
lowed by the output layer was determined to be the best.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What is the strategy implemented to monitor the model performance during training?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The authors have employed several strategies to monitor the performance of their machine learning models during training. They utilized various libraries like Scikit-learn, TensorFlow, Keras, and LightGBM to build their Random Forest (RF), Artificial Neural Network (ANN), and LightGBM models. To determine the optimal structure and hyperparameters for these models, they used Optuna, which is an open-source hyperparameter optimization framework. This allowed them to find the most suitable configurations for their models based on predefined parameters and ranges.

For evaluating the performance of the algorithms, the authors compared the loss functions (Mean Squared Error - MSE) of the optimized models. Additionally, they also computed Mean Absolute Error (MAE) and Coefficient of Determination (R^2) as references. After this, they calculated the Root Mean Square Error (RMSE) for all observation sites to assess the overall performance of the optimized models. Furthermore, they calculated the RMSE for each observation site individually to gauge the performance of the models for each specific location.

To understand the machine learning models better, the authors used SHAP (SHapley Additive exPlanations) values. These values help explain how much each feature contributes to the prediction made by the model. By calculating the average of the absolute SHAP values for each input variable, they could identify the importance of different variables in predicting the first flowering and full blossom dates.

Overall, the authors have adopted a comprehensive approach to monitoring the performance of their machine learning models during training. They have used multiple evaluation metrics, tuned hyperparameters using Optuna, and leveraged SHAP values to gain insights into the significance of individual features in making predictions.