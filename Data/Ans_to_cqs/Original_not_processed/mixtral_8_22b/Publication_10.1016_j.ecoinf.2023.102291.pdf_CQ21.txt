Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

2.2. Training dataset and testing dataset

To test the efficacy of our models, we created several segments by 
using  the  same  sliding  window  approach.  Namely,  we used  the  same 
window size that was used in training, and thus multiple segments were 
created  across  the  entire  testing  file  by  moving  the  window  by  one 
second  in  the  moored  recording.  We  converted  each  of  these  testing 
segments into spectrograms (FFT length = 1024; hop size = 128; Hann 
window) which were used as input for subsequent model prediction. All 
generated spectrogram images were created as 5 × 5 in. but varied in 
their dpi configuration, ranging from 200 × 200 (40 dpi) to 500 × 500 
(100 dpi) samples. The number of images used per class was constrained 
by our computational resources, and we used the maximum number of 
images possible in each case. We attempted a number of experiments 
and varied the number of classes. The largest dataset built comprised 
80,000 images when combining three seconds window size and 40 dpi

4. Discussion

2. Material and methods 

2.1. Data collection

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the postprocessing steps involved after the model training (e.g., Saliency maps, Metrics calculation, Confusion matrix)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The text does not provide explicit information on the specific post-processing steps involved after the model training. However, based on common practices in machine learning, some potential post-processing steps could include generating saliency maps, calculating metrics such as accuracy or F1 score, creating confusion matrices, and visualizing results using tools like TensorBoard. These techniques help evaluate the performance of the trained model and identify areas for improvement. It is important to note that the actual post-processing steps may vary depending on the specific requirements and goals of the project.