Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

The training dataset, including 268 sample plots with 39 features in a 
tabulated format, was used as input during the training process (opti-
mizing  hyper-parameters  and  fitting  models  with  these  data).  The 
training data set was divided into two parts, in which 80% was used for 
training/validation, and the remaining 20% was kept as unseen data for 
testing. To eliminate bias, 10-fold cross-validation was used during the 
training  process,  and  mean  RMSE  was  used  as  the  objective  function 
(lost function). Table 4 shows RMSE, MAE, and R2  using different op-
timizers. In addition, we tested the differences between the RMSEs in 
Table 4 using the Wilcoxon Signed-Rank test with paired samples. The 
differences between (XGBoost-BO vs. XGBoost-TDO, XGBoost-BOHB vs. 
XGBoost-TDO) or (LightGBM-BO vs. LightGBM-TDO, LightGBM-BOHB 
vs.  LightGBM-TDO)  are  significant.  However,  the  performance  of 
XGBoost-TDO  versus  LightGBM-TDO  appears  to  be  the  same (Fig.  3),

2.4. Hyperparameter optimisation 

Hyperparameter  optimization  searches  for  the  best  set  of  hyper-
parameters  for  a  machine  learning  model  that  can  perform  best  on  a 
given  task.  In  many  packages,  random  or  grid  search  is  the  default 
method  for  selecting  optimal  hyperparameters  (Snoek  et  al.,  2012). 
There are many studies on the selections of optimization algorithms for 
theoretical  problems  or  engineering  applications,  in  which  various 
versions  of  Bayesian  optimizers  and  Swarm-based  algorithms  were 
compared (Stenger et al., 2019; Stenger and Dirk, 2022).

MSAVI =

GREEN (cid:0) BLUE 
2NIR + 1 (cid:0)

√

̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅
(2NIR + 1)2 (cid:0) 8(NIR (cid:0) RED)

predictive efficiency, handle large datasets, and reduce training time. It 
is typically recommended for tabular datasets. LightGBM differs from 
other tree-based methods by implementing leaf-wise splits that create 
more  complex  trees,  which  are  more  efficient  in  reducing  loss  and 
resulting  in  higher  accuracy.  The  split  is  based  on  a  novel  sampling 
method named Gradient-Based One-Side Sampling (Ke et al., 2017), in 
which data with small gradients are excluded, and the rest are used for

As  machine  learning  models  have  been  increasingly  deployed  in 
critical applications, there may be a growing demand for interpretable 
and explainable hyperparameter optimization techniques. Methods that 
provide transparency and explainability in the hyperparameter tuning 
process  could  gain  importance  to  ensure  fairness,  accountability,  and 
transparency in developing machine learning models. Machine learning 
algorithms are considered robust classification and regression methods 
in which models are trained and learned from input data to improve the 
prediction of unseen data. However, the internal process is not under-
standable, as  it is  considered a  black-box stage. To  better understand 
interactions  between  features,  we  evaluated  several  performance  in-
dicators,  such  as  feature  importance,  feature  interactions,  and  contri-
butions of all features. The Shapley values provide a way to distribute

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the criteria used to split the data for deep learning model training (e.g., train, test, validation)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
In this study, the training dataset consisting of 268 sample plots with 39 features was used for training the deep learning models. The dataset was divided into two parts, where 80% was allocated for training and validation purposes, while the remaining 20% was reserved as unseen data for testing. This division aims to prevent overfitting and evaluate the model's ability to generalize well to new, unseen data.

To further mitigate any potential biases, the researchers employed 10-fold cross-validation during the training process. Cross-validation involves dividing the available data into k subsets, also known as folds, and then iteratively training the model on k - 1 folds while validating its performance on the remaining fold. After completing one iteration, another fold becomes the validation set, and the process repeats until each fold has served as the validation set once. By averaging the results across all iterations, cross-validation provides a more reliable estimate of the model's performance compared to a single train-test split.

In summary, the criteria used to split the data for deep learning model training in this study include allocating 80% of the data for training and validation and reserving 20% for testing. Additionally, 10-fold cross-validation was applied during the training process to minimize bias and obtain a more accurate assessment of the model's performance.