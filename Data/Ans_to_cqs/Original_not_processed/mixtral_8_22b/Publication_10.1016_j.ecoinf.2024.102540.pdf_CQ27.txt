Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

To deploy this application to the web, a containerization system was 
used. Docker is an open platform which is used for building, distributing, 
and running containerized applications (Rad et al., 2017). Using Docker, 
the  container  was  built  and  hosted  with  Google  Cloud  Run,  which  is 
another  service  that  is  used  to  build  and  deploy  containerized 

applications. 

2.8. Methodology summarized in a data flow diagram 

The  whole  methodology  was  summarized  in  a  data  flow  diagram 
depicted  in  Fig.  4.  The  training  phase  consisted  of  using  the  labeled 
dataset to train the detection models, the validation phase consisted of 
evaluating and fine tune hyperparameters, while the performance of the 
final models were using the test images. The best trained model was used 
to  build  a  web  application  to  detect  alates  on  sorghum  leaves  auto-
matically, which is open-source available. 

3. Results

2.3. Imagery splitting ratio 

We split the dataset in a ratio of 80:10:10 for training, validation, and 
testing sets, respectively. This ratio was used due to prior evidence of 
exceed performances in detecting small insects and diseases using deep 
learning models (Kiratiratanapruk et al., 2022; Krishnadas and Sampa-
thila, 2021; Mulchandani et al., 2019). The training dataset consisted of 
1543 images, 243 images for the validation set, and 247 images for the 
testing set and all were at input resolution of 640 × 640 pixels. The 1280 
× 1280 pixels input resolution consisted of 1637 images for the training 
set, 255 images for the validation set, and 262 images for the testing set. 
Independently,  we  trained  5  different  versions  of  the  YOLOv5  model 
family  including:  YOLOv5n,  YOLOv5s,  YOLOv5m,  YOLOv5l,  and 
YOLOv5x models to detect alates on sorghum leaves. 

2.4. Characteristics of deep learning models

Nearest Neighbors, Support Vector Machines, Decision Trees, Boosting, 
and Random Trees (Yang et al., 2010). However, a growing subarea in 
machine learning, called deep learning, can leverage large image data-
sets  to train  deep neural networks such as  Convolutional Neural  Net-
works (CNNs) (Jordan and Mitchell, 2015) to make accurate predictions 
on new, unseen images.

Usually,  growers  or  entomologists  manually  monitor  pests  using 
morphology keys, pest guides, and images to match key characteristics 
with  common  genera  and  species  names  reported  in  the  literature 
(Bishop and Hutchings, 2011). However, using machine learning, and 
specifically, deep learning approaches, has the potential to expedite this 
important component to the monitoring process by automating several 
tasks using imagery (Grijalva et al., 2023a; Grijalva et al., 2023b; Wang 
et al., 2023). Species detection and classification of organisms found in 
production sorghum fields are common tasks during standard scouting 
events  or  bouts.  Machine  learning  can  automate  these  tasks  with  the 
slightest  use  of  labor  and  time  (Chen  et  al.,  2021).  Many  traditional 
machine  learning  algorithms  have  been  used  to  classify  pests;  these 
include  the  Normal  Bayes  classifier  (a.k.a.,  Naïve  Bayes  classifier),  K

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What process was followed to deploy the trained deep learning model (e.g., Model serialization, Platform selection)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
After training the deep learning models, specifically the YOLOv5 family models (i.e., YOLOv5n, YOLOv5s, YOLOv5m, YOLOv5l, and YOLOv5x), the best performing model was selected for deployment. To deploy this application to the web, a containerization system was utilized. Specifically, Docker, an open platform used for building, distributing, and running containerized applications, was employed to create the container. Once the container was built using Docker, it was then hosted with Google Cloud Run, another service used to build and deploy containerized applications. Therefore, the process involved selecting the best trained model, creating a container using Docker, and hosting the container with Google Cloud Run.