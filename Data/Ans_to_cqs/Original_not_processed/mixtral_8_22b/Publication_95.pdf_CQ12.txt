Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

When training a deep convolutional neural network, it is important to split the data
into a training set, a validation set, and a test set. The training set is used for optimizing the
parameters of the network, while the validation set is used for monitoring the performance
of the network during training and for comparing the performance of different networks
with, for example, different hyperparameters or network structures. The test set acts as a
ﬁnal evaluation of a network. To ensure a proper evaluation on both the validation set and
the test set, samples in each set must be independent and have similar class distributions.
The full data set can be split in various ways. The naïve approach is to randomly
sample images from the full data set. However, due to the images being captured in
close proximity and potentially having overlapping ﬁelds of views, information may leak
between the data sets when using the naïve approach. Another approach would be to

5.1.1. Network Training Procedure

In both network structures, the ﬁnal classiﬁcation layer was adapted to match the
seven classes (six IAPS and “no species” (Table 2)). The input image size affects the
processing time of each image, but can also impact the classiﬁcation accuracy. Therefore,
the network models were trained on ﬁve different image sizes: 96 × 128 px, 192 × 256 px,
384 × 512 px, 768 × 1024 px, and 1536 × 2048 px (see Supplementary Materials for a visual
comparison of the image sizes). For each image size, a network was trained using either
random weights or weights pre-trained on ImageNet and with global max pooling or
global average pooling before the ﬁnal classiﬁcation layers.

All networks were trained on the training set for 100 epochs, using the Adam opti-
mizer [27] with a learning rate of 0.001 and cross-entropy loss. The image batch size varied
from 1 to 32 images, depending on the input image resolution with larger batch sizes
for smaller image sizes. After each epoch, the network was evaluated on the validation
set. The epoch model with the highest accuracy on the validation set during training was
saved for further analysis. Before training the networks, the training set was balanced by
upsampling the images from the underrepresented classes through repetition to match the
number of images of the most represented class, “No species”.

Figure 8. Recall of the ResNet50V2 models on the validation set as a function of the annotation size relative to image size.
The validation images were binned according to the relative size of their respective annotations with respect to the image
size (“annotation size”). Each line shows the recall (left axis) of a ResNet50V2 model with a given input image size across
the binned annotation sizes. The recall lines were “smoothed”, using kernel density estimation. The number of images in
each bin is shown as vertical bars (right axis).

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What type of deep learning model is used in the pipeline (e.g., CNN, RNN, Transformer)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:

The text mentions that a deep convolutional neural network (CNN) is used in the pipeline. Specifically, two network structures are mentioned: one based on VGG16 and another based on ResNet50V2. Both of these architectures are well-known types of CNNs commonly used for image classification tasks. The final classification layer of these networks was adapted to match the seven classes relevant to this study. The networks were then trained on five different image sizes, using either random weights or weights pre-trained on ImageNet. The Adam optimizer was employed for training, along with cross-entropy loss.