Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

models, pre-trained on 1.4M images from 1000 classes. First,
the intermediate layer of all the models was selected to use
for feature extraction. For this purpose, the output of the last
layer (bottleneck layer) is commonly used prior to the ﬂatten
operation. The reason is that all the fully connected layers
are specialized to the task network was trained on; thus, the
features learned by these layers will not be useful for the new
task. The bottleneck features are more generic. Therefore, the
base models were frozen, loaded with weights trained on the
ImageNet dataset and used as a feature extractor. We added
a dropout layer with a dropout rate of 0.2 to reduce the
overﬁtting of the model. Finally, the top classiﬁer softmax
layer was added for predicting the class for an input image.
The model with the base model of MobileNetV2 was compiled
and optimized with Adam optimizer. The other with the base
model of MobileNetV3 were optimized with Gradient descent

D. Model Training

Feature Extraction: The hardware to train the model included
a Lenovo laptop equipped with an 8265U CPU at 1.80 GHz
of Intel Core i5, 8 GB of RAM running on a Windows 10 64-
bit system. The software tools included Annaconda3 Jupyter
Notebook with Python 3.8, where the Tensorﬂow, OpenCV-
python3 [37] and Keras [38] libraries were used. The dataset
was divided in a ratio of 75:25 into a training set of 5789
images and a test set of 1930 images. To obtain the pre-
trained weight parameters, we built the base models from the
MobileNetV2, MobileNetV3-Large and MobileNetV3-Small

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

IV. RESULTS AND DISCUSSION

CNN comes with the disadvantages of a huge number
of labelled training samples requirement for weighting pa-
rameters and powerful GPUs for a faster learning process.
With limited training samples, learning too many parameters
directly will result in overﬁtting even after using over-ﬁtting
prevention techniques such as Dropout [7]. Overﬁtting of a
machine learning model includes more terms and uses more
complicated approaches than necessary [8]. To make deep
CNN ﬁt for small datasets while keeping high accuracy is
a challenge. To overcome this challenge, transfer learning [9]
offers the solution, which implies reusing previously attained
knowledge in similar tasks. Some studies analyzed the use
of transfer learning for many deep learning algorithms. These
evaluations [10] concluded that transfer learning improves the
accuracy of deep learning models, which apply deep features
and ﬁne-tuning.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What measures were taken to ensure the generalizability of the deep learning model (e.g., Diverse dataset, cross-validation, Stratified splitting)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
To ensure the generalizability of their deep learning model, several measures were implemented during its development and training. One key measure was the selection of diverse datasets for training and testing purposes. The model was trained on ImageNet dataset, which consists of 1.4 million images across 1000 different classes. This diversity helped prevent overfitting and ensured that the model could perform well on unseen data.

Additionally, the authors employed transfer learning, a technique that leverages knowledge gained from solving one problem to solve another related problem. In this case, they utilized pre-trained models from MobileNetV2, MobileNetV3-Large, and MobileNetV3-Small architectures. By doing so, they took advantage of the already existing knowledge embedded within these models, thereby improving the performance of their own model without requiring extensive additional training data or computational resources.

Furthermore, the dataset was split into a training set and a test set in a 75:25 ratio. While it isn't explicitly mentioned whether stratified sampling was used, the large size of the dataset suggests that both sets would still contain sufficient examples from each class to maintain representativeness.

Lastly, the authors also incorporated a dropout layer with a rate of 0.2 to further mitigate potential overfitting issues. Dropout is a regularization method that randomly drops out neurons during training, effectively preventing complex co-adaptations between them. As a result, the model becomes more robust and better able to generalize to new data.

In summary, the authors ensured the generalizability of their deep learning model through various means including utilizing a diverse dataset, employing transfer learning, implementing a reasonable train/test split, and incorporating a dropout layer for regularization.