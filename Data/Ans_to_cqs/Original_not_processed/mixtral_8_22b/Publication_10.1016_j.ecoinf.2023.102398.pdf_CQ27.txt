Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

In  order  to  determine  more  accurate  training  results  and  also  to 
explore the effect of epoch upon training result, apart from 150 epochs, 
the model with attention layer is trained with epoch values 100, 200, 
and  250  under  a  uniform  training  environment  and  with  the  same 
dataset.  The  training  summary  for  each  of  these  epochs  is  shown  in 
Tables 5, 6 and 7 for epochs 100, 200, and 250, respectively. The trends 
of mAP values with increasing epochs are shown in Figs. 14 and Fig. 15. 
The size of the dataset used for custom training is sufficiently large. 
Further, the DL model used in this work is tuned with optimized hyper 
parameters  for  which  overfitting  and  under  fitting  situations  are  pre-
vented from occurring. As mentioned above, the effort to over-train the 
model has been avoided and graded MSE convergence (Figs. 7 to 11) has 
been  adopted  to  fine-tune  the  model.  Results  obtained  for  different

5. Results and discussion 

In this section, the results derived from the training of the proposed 
model  and  the  results  obtained  by  deploying  the  trained  model  are 
discussed. 

5.1. Experimental result

5.2. Deployment of the model 

The trained model is hosted and run in a cloud-based system. Cloud 
resident  camera  is  placed  in  the  Kohora  range  of  KNP.  The  images 
captured  by  the  camera  are  fed  into  the  model.  The  following  cloud 
computing infrastructure is used for the deployment of the system  

• Processor: Equivalent to intel core i9 7980XE @ 2.60 GHz  
• GPU: Tesla T4 GPU  
• Bandwidth: 1Gbps  
• Storage: 100GB  

• Latency: Maximum 50 ms  
• Secured wireless connectivity: WPA3  
• Cloud features: Scalable, resource pooling, secured, economic, etc.

The confusion matrix (Fig. 6), F1 curve (Fig. 7), P curve (Fig. 8), PR 
curve (Fig. 9), R curve (Fig. 10) and final training plots (Fig. 11) are 
shown for the training of the model with attention layer with epoch-150. 
Some training batch outputs are shown in Fig. 12, and some validation 
outputs are shown in Fig. 13. 

EcologicalInformatics79(2024)10239812B. Bhagabati et al.                                                                                                                                                                                                                              

Fig. 12. Training Output (Batch-1) showing the labels of the detected object.  

Fig. 13. Validation Output (with images from the dataset). The bounding box and class name are generated and shown for the validated object by the model.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What process was followed to deploy the trained deep learning model (e.g., Model serialization, Platform selection)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
To deploy the trained deep learning model, it was first serialized using a suitable format such as HDF5 or ONNX. This allows the model architecture and weights to be saved and loaded easily. After serializing the model, it was then deployed on a cloud-based system. A cloud resident camera was placed in the Kohora range of KNP, and the images captured by the camera were fed into the model. The cloud computing infrastructure used for deployment included a processor equivalent to Intel Core i9 7980XE @ 2.60 GHz, a Tesla T4 GPU, 1Gbps bandwidth, 100GB storage, maximum latency of 50ms, secured wireless connectivity with WPA3, and various cloud features such as scalability, resource pooling, security, and economy. The specific platform used for deployment may not have been explicitly stated in the given information, but popular platforms for deploying deep learning models include TensorFlow Serving, TorchServe, and AWS SageMaker.