Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

The squared difference between a pixel (and each color channel of 
each pixel) of the output and its counterpart in the input was calculated, 
with the mean across all pixels giving the loss, with 2d batch normali-
zation and no dropout being applied between each layer. The “Adam” 
optimization algorithm was used. The pre-processed training data were 
then  used  to  train  the  auto-encoders.  Training  was  performed  for  3 
epochs for each network.  

–  The  implicit  pooling  network  was  trained  for  1  epoch  using  a 
learning rate of 0.001, then 1 epoch with a learning rate of 0.0001 
and 1 of 0.00001.  

–  The max-pooling network was trained for 3 epochs using a learning 

rate of 0.001. 

3.5. Evaluation 

To evaluate the performance of the latent representation in machine- 
learning  tasks,  hierarchical  clustering  was  used  as  a  sample  task  to 
evaluate our representation’s  ability to group bird calls into  different 
call types.

3.3. Network architecture 

The architecture used was a heavily modified version of that used in 
“Unsupervised Deep Learning with Pytorch” by github user “eelxpeng” 
(eelxpeng, 2018). As the size of our audio spectrograms has been con-
strained to 128 × 128 pixel RGB images with values repeated in each 
color channel to produce a greyscale image. For this initial experiment 
testing  the feasibility of using an auto-encoder-generated feature rep-
resentation for ecoacoustic analysis, we chose a basic auto-encoder ar-
chitecture  to  minimise  the  complications  that  may  be  introduced  by 
more advanced architectures. A rectified linear unit (ReLU) based acti-
vation function was be used, to help mitigate the vanishing/exploding 
gradient  problem  (Xu  et  al.,  2015).  Networks  using  implicit  pooling 
(determined using pytorch) and explicit max-pooling were used.

The autoencoder based on explicit max-pooling consists of a 128x128x3 
input layer, and 4 convolutional layers using 3 × 3 pixel kernels, stride 
of 1 pixels and zero padding of 1 pixel on each but the first layer, and 4 
max-pooling layers using 4 × 4 pixel kernels, stride of 2 pixels and zero 
padding of 1 pixel. The encoder’s output is then flattened to produce a 
384x1x1  feature  vector.  The  decoder  network  accepts  the  384x1x1 
feature vector produced by the encoder network as its input, and consists 
of 4 convolutional layers with a 3 × 3 kernel, stride of 1 pixel and zero 
padding of 1 pixel on each layer except the last, and 4 max-unpooling 
layers using 4 × 4 pixel kernels, stride of 2 pixels and zero padding of 
1 pixel, which produces a 128x128x3 output.

For  deep  learning  tasks  you  often  start  from  a  point  of  labelling 
training your data. However this can be slow and problematic. It can be 
useful to have a general representation for machine learning, that does 
not  rely  on  labeled  data  or  domain  specific  features.  This  paper  will 
focus on the use of auto-encoders for automatic feature extraction. First 
we  will  explore  the  relevant  literature,  then  explain  our  method  for 
automatically learning features, our method for comparing with other 
feature  representations,  results,  and  finally  our  discussion  and 
conclusions. 

The outcome of this research is an alternative method for analysing 
eco-acoustic  data.  It  will  be  of  significance  to  the  fields  of  Machine 
Learning and Soundscape Ecology. This research will be of direct benefit 

* Corresponding author. 

E-mail address: benjamin.rowe@hdr.qut.edu.au (B. Rowe).

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
In the given context, the optimization technique applied in the deep learning pipeline is mentioned as the "Adam" optimization algorithm. Adam is a popular optimization algorithm used in deep learning models due to its computational efficiency and low memory requirements. It combines the advantages of two other extensions of stochastic gradient descent, namely Root Mean Square Propagation (RMSProp) and Adaptive Gradient Algorithm (AdaGrad), resulting in an efficient adaptive learning rate method for gradient descent optimization.