Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Before introducing our proposed algorithm, it would be essential to discuss the existing basic
theoretical framework. The question of whether a small Neural Network architecture can
learn a lot, even from huge training data sets, was answered in the aﬃrmative by ELM. An
ELM (Cambria & Guang-Bin, 2013) is a Single-Hidden Layer Feed Forward Neural Network
(SLFFNN) with N hidden neurons, randomly selected input weights and random values of
bias in the hidden layer, while the weights at its output are calculated with a single multipli-
cation of vector matrices. SLFFNNs are used in ELMs because of their ability to approach any
continuous function and to classify any discontinuous areas. An ELM can accurately learn N
samples, and its learning speed can be even thousands of times greater than the speed of
conventional Back Propagation Feed Forward Neural Networks (BP_FFNN).

As it has been proven, ELMs are an important approach for handling and analysing Big
Data as they require the minimum training time relative to the corresponding engineering
learning algorithms. Moreover ELMs do not require ﬁne manipulations to determine their
operating parameters and ﬁnally they can determine the appropriate output weights
towards the most eﬀective resolution of a problem. What is most important, they have
in contrast to corresponding methods which adjust their
the potential to generalize,

508

K. DEMERTZIS ET AL.

performance based solely on their training data set. It is obvious that the emerging use of
ELM in Big Data analysis as well as DELE creates serious prerequisites for complex systems’
development by low-cost machines.

8. Future research

ELMs use the SLFFNN’s general methodology, with the speciﬁcity that the Hidden Layer
(feature mapping) is not required to work in a coordinated fashion. All hidden-layer par-
ameters are independent from the activation functions and from the training data.

ELMs can randomly create hidden nodes or hidden level parameters, before seeing the
training data, while it is remarkable that they can handle non-diﬀerential activation
equations and they do not address known NN problems such as stopping criterion, learn-
ing rate and learning epochs (Cambria & Guang-Bin, 2013; Huang, 2014, 2015).

A mathematical basis has been provided for the understanding of ELM (Equations

(1)–(9)) (Cambria & Guang-Bin, 2013; Huang, 2014, 2015).

For an ELM using SLFFNN and random representation of hidden neurons, input data is
mapped to a random L-dimensional space with a discrete training set N, where
(xi,ti), i [ 1, N with xi [ Rd and ti [ Rc. The speciﬁcation output of the network is the
following:

499

This is a multi-layered neural network model that receives successive OL data streams
and uses the unsupervised GRELMA algorithm as a basic building block in which the
outputs of each level are used as inputs to the next one (Sun, Zhang, Zhang, & Hu, 2017).
An autoencoder is an ANN used for unsupervised learning of eﬃcient coding. The aim
of an autoencoder is to learn a representation (encoding) for a set of data, but with the
output layer having the same number of nodes as the input layer, and with the
purpose of reconstructing its own inputs (instead of predicting target value Y given
inputs X). The algorithm is described below (Sun et al., 2017):

Algorithm 1. GRELMA Algorithm for Clustering (Sun et al., 2017)

i=1 the number of hidden neurons nh, the penalty coeﬃcient κ and λ

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The provided text does not explicitly mention any specific optimization techniques applied in the deep learning pipeline, such as Stochastic Gradient Descent (SGD) or Adaptive Moment Estimation (Adam). However, it does provide information about Extreme Learning Machines (ELMs), which are a type of Single-Layer Feedforward Neural Network (SLFN) that can learn much faster than traditional backpropagation networks.

In the context of ELMs, the optimization technique involves setting the input weights and biases randomly, then determining the output weights through a simple matrix calculation. This process eliminates the need for iterative tuning of parameters, making ELMs significantly faster than other types of neural networks.

While this information does not directly answer the query regarding optimization techniques like SGD or Adam, it provides insight into how ELMs optimize their performance without relying on these commonly used techniques.