Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

We further improved Waveman by modifying BatNet and opti-
mizing parameter setting of batch size. We add new kind of BNorm
layers behind the 22 convolutional layers to prevent overfitting when
we trained models using BatNet (Fig. 2C). Therefore the model
“learned” to generalize from a trend in both “known” and “unknown”
datasets rather than to maximize the performance on the “known”
datasets (usually called training datasets, Ioffe and Szegedy, 2015).
Computers can only train with small volumes of images at once as they
have too little Random Access Memory or Graphic memory. Batch size
was set to limit the image number. In this study, we set a large batch
size equal to 128, which means training with 128 images for each
iteration.

BatNet has a cascade of multiple layers of nonlinear processing units
for feature extraction from low-level features and syntheses to high-
level features (by converting data matrix shapes and synthesis the
matrix). Low-level features are some of raw data points (i.e., pixels in
images). High-level features include frequency, bandwidth, and hun-
dreds of other combined features which may have no specific meaning
in isolation. During synthesis as the data from “shallow” to “deep”
layers, the algorithm weights the features iteratively according to the
reference dataset in order to best describe call structure for specific bat
species. However, the acoustic signal synthesis with huge number of
layers usually leads to information loss to some degree (He et al., 2015).
We, thus, introduced eight shortcuts among layers in order to send
partial original information to the next layer (proposed by He et al.,
2015), which solved the information loss issue as layer number in-

convolutional layers. Activation functions are Rectified Linear Unit for non-linear classification.

size of 256*256 pixels were converted to 64*64 pixels to save training
time and reduce high memory graphics use. The size-reduced images
packaged into two datasets: training dataset with 85% of images
(111,244/130,858) and validation dataset with 15% (19,614/130,858)
using a Python script Making_dataset.py in Waveman. To balance the
image number for all the species, we provided an upper limit for when a
species had too much data (Supplementary information 1, S1). We also
developed a method to increase the number of images for the rare
species (S2), in which signals were rescaled exponentially, and we
shifted the window slightly either side of the call to change background
noise. Both these measures ensure rare species with small image num-
bers will not be under-represented and under-classified relative to
common species (S1), as though we cannot incorporate the same level
as call variation as in common species this measure rebalances the

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the data augmentation techniques applied in the deep learning pipeline (e.g., Fliping, Roating, Scaling)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The text does not provide explicit details about the specific data augmentation techniques used in the deep learning pipeline. However, it mentions that the size of the images was reduced from 256*256 pixels to 64*64 pixels to save training time and reduce high memory graphics use. Additionally, it is mentioned that signals were rescaled exponentially, and windows were shifted slightly either side of the call to change background noise. These could be considered as part of the data augmentation process. Unfortunately, there is no mention of flipping, rotating, or scaling as data augmentation techniques in the given context.