Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

7 of 29

The quantity of training data derived from ground data collection in 2018 was limited.
A U-Net implemented with Keras produced a low training and testing accuracy with
segmentation results on testing data differing between repetitions. Implementing a U-Net
model within the arcgis.learn module of the ArcGIS API for Python [39] removed the
requirement for a quantitatively massive dataset. Additionally, the U-Net implemented
through argis.learn is pretrained on ImageNet to further improve classiﬁcation accuracies.
This reduces the time and resources spent on ground truth data collection. Hyperparameter
tuning was done to select the best U-Net model [31,34,40]. Based on hyperparameter
optimization, it was found that the best model uses an input patch size of 64 × 64 pixels
and a ResNet-50 backbone [31,34,40].

2.4. Support Vector Machine (SVM)

a batch normalization layer after hidden layer 2 increased the testing accuracy of the model. These additional layers—dropout and batch normalization—reduce the over-fitting of the model on the training data and increase generalization on testing data. The hyperparameters in this network—the learning rate, number of epochs, and batch size—were further tuned such that the testing accuracy and the kappa were the best among all models. The optimized hyperparameter values for learning rate and batch size were 0.007 and 48, respectively.  Figure 4. Network architecture implemented for the Deep Neural Network (DNN) model along with the number of neurons that were optimized for each hidden layer. The output layer contains 11 neurons, corresponding to the number of classes to be classified. 2.7. Accuracy Assessment To compare the accuracy of various models independent testing data, i.e., same for all models, is used for model evaluation. The confusion/error matrix and subsequent met-rics are

A typical Convolutional Neural Network (CNN) contains a convolutional layer and
a pooling layer. In the convolutional layer, a ﬁlter of size N × N pixels slides over the
input image and performs element-wise multiplication to produce a single value. The
ﬁlter slides right to left and downward bottom to repeat the element-wise multiplication,
resulting in a feature map with a shape reduced by a value of N-2. The pooling layers aim
to reduce all the useful information extracted from convolutional layers to much smaller
dimensions. CNNs have been used for imagery-based applications because of their ability
to extract spectral and textural information from the images [20]. Textual information
derived from convoluting kernels in the neural network enhances the existing spectral
information. In a Fully Convolutional Neural Network (FCNN), the ﬁnal fully connected
dense layer within a CNN architecture is replaced with an up-sampling convolutional

the U-Net model is the labeling of each pixel in the training data. Abundant data are needed
for training deep neural networks of at least 1000 image samples. In such cases, a pretrained
network can reduce the amount of training data needed [47]. The U-Net implemented
within arcgis.learn had a ResNet-50 backbone that was pretrained on ImageNet.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the data augmentation techniques applied in the deep learning pipeline (e.g., Fliping, Roating, Scaling)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Unfortunately, there isn't any explicit mention of specific data augmentation techniques like flipping, rotation, or scaling being applied in the given context. However, we do see some strategies employed to enhance the performance of the deep learning models. For instance, the use of a pretrained U-Net model within the arcgis.learn module helped overcome the limitation of having a small dataset. This approach leverages transfer learning, where a model trained on one task is reused as the starting point for another related task. Furthermore, the implementation of dropout and batch normalization layers in the DNN model improved its performance by reducing overfitting and increasing generalization on testing data. Lastly, hyperparameter optimization played a crucial role in selecting the best model configuration, including parameters like input patch size and the choice of a ResNet-50 backbone.