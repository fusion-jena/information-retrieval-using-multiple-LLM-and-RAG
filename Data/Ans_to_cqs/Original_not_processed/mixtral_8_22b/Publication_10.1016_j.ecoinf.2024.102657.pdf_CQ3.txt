Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

grams, and created the metadata .csv file necessary for training the CNN 
and k-NN. Identical in structure to the metadata file outlined above, this 
file contained the metadata for the training set as opposed to the met-
adata for the entire dataset. 

No additional preprocessing was applied to the spectrograms as the 
goal was to do the least amount of preprocessing possible in order to 
demonstrate  the  power  of  human-machine  teaming.  Further,  when 
assessing the accuracy of the CNN on noise-filtered data versus raw data, 
the accuracy levels were similar: after 10 trials, the CNN’s accuracy on 
the  filtered  data  averaged  to  99.22%  and  the  accuracy  on  the  non- 
filtered data averaged to 99.25%.

user can label the song four ways; they can choose one of the machine 
learning algorithms predictions (the CNN or k-NN labels), use a different 
pre-existing label, or assign the song a new label. After all songs have 
been classified, the program saves all human classified data and labels 
which can be used to retrain the network, using 3_update_network.py. 
Below, we outline the data used for training and each main component 
of DialectDecoder. For an illustration of the pipeline, see Fig. 1.

Additionally,  we  created  a  metadata  .csv  file  that  listed  all  of  the 
necessary classification information for training the CNN and k-NN . The 
.csv file had five columns. The first, dialect_folder, listed the file path to 
the folder containing the bird song. Each folder was labeled with the 
dialect type and the year it was collected, for example, “ABLA_2022”. 
Note, each folder name contained the label of the songs inside, as this 

EcologicalInformatics82(2024)1026572B. Story et al.

Fig. 1. Architecture for the DialectDecoder pipeline. The user inputs the ∼2 s song clips and the location data from a metadata file into the system (Input). Then, 
DialectDecoder prepares the labeled data for processing (Preprocess). Next, the program trains the CNN and k-NN (Train) to classify unknown songs. Then, Dia-
lectDecoder classifies or prompts the user to classify new songs the program has not seen before (Classify). Finally, after human classification has been completed, the 
program adds in the user classified songs to the dataset for retraining (Retrain) and retrains the networks with the new data. 

Fig. 2. Example spectrograms of the 9 different dialects.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the data annotation techniques used in the deep learning pipeline (e.g., bounding box annotation, instance segmentation)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The text does not provide explicit details about specific data annotation techniques such as bounding box annotation or instance segmentation. However, it mentions that users can manually label songs by choosing one of the machine learning algorithm predictions (CNN or k-NN labels), using a different pre-existing label, or assigning the song a new label. This process is part of the Classification phase in the DialectDecoder pipeline, where the user classifies new songs the program hasn't seen before. Once the human classification is complete, the program adds the user-classified songs to the dataset for retraining. Therefore, the primary data annotation technique employed here appears to be manual labeling of audio files based on their content.