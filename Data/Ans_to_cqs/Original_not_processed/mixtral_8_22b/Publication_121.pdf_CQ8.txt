Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

App Development: For tree species identiﬁcation in a remote
area, an end-user app is essential. For the app development,
Android Studio [39] was used. The saved models were
converted into the TensorFlow Lite [40] version using the
TensorFlow Lite converter. TensorFlow Lite is a set of tools
to perform deep learning on smartphone and IoT devices. The
architecture of the mobile app is shown in Fig. 4. The squares
marked with dotted red will be included in future iterations.
The size of the models based on MobileNetV3-Large and
MobileNetV3-Small was 4.88 MB and 1.99 MB, respectively,
which are lightweight compared to AlexNet (227.5 MB) [27].
The app is developed using the Java programming language.
The leaf detection module in the app contains a Tensorﬂow
Lite interpreter for the TensorFlow Lite model.
App Testing: For testing the application, Android studio
comes with built-in phone emulators, or the app could be
deployed to an actual device. From an online search, we

D. Model Training

Feature Extraction: The hardware to train the model included
a Lenovo laptop equipped with an 8265U CPU at 1.80 GHz
of Intel Core i5, 8 GB of RAM running on a Windows 10 64-
bit system. The software tools included Annaconda3 Jupyter
Notebook with Python 3.8, where the Tensorﬂow, OpenCV-
python3 [37] and Keras [38] libraries were used. The dataset
was divided in a ratio of 75:25 into a training set of 5789
images and a test set of 1930 images. To obtain the pre-
trained weight parameters, we built the base models from the
MobileNetV2, MobileNetV3-Large and MobileNetV3-Small

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

to detect

Small took 60% less time to train the model as compared to
the MobileNetV3-Large and MobileNetV2. We believe that the
accuracy of our models can be improved with data augmenta-
tion methods within 20 epochs. Our evaluation indicates that
MobileNetV3-based transfer learned models are lightweight,
cost and time-efﬁcient, making them perfect candidates to be
embedded in smartphone apps and IoT devices to perform
deep learning tasks in rural areas without mobile networks.

VII. FUTURE WORK

Various research studies, reviewed in the next section, aimed
at deep learning methods for plant species identiﬁcation. How-
ever, these studies focused on utilizing complex deep models,
such as InceptionV3, AlexNet, and VGG-16, which require a
considerable number of iterations and computation power to
train the network. Moreover, the existing plant identiﬁcation
applications such as PictureThis [11] and Pl@ntNet [12] de-
pend upon the network connection to evaluate the captured im-
age by analyzing trained models on servers. These applications
fail in remote forestry areas where mobile networks provide
limited/no patchy connection [13]. Due to low power and
computation capabilities, a model with reduced computation

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "Where is the code repository of the deep learning pipeline available (e.g., GitHub, GitLab, BitBucket)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Unfortunately, there isn't enough information in the given context to determine where the code repository of the deep learning pipeline is available. It does not mention any specific repositories like GitHub, GitLab, or BitBucket. Therefore, it is impossible to accurately state where the code repository is located.