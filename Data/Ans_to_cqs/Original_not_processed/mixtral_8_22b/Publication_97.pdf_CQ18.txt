Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

High-intensity ﬂuctuations of the loss function shown in Figure 2, which corresponds to the best
set of parameter values, are caused by the speciﬁcity of the algorithm used at the training stage. We
did not have a prebuilt set of images to use for the training. We instead generated batches of training
images randomly, on the ﬂy, from source images presented in Table 1 (we randomly cropped source
images to 256 × 256 resolution and applied augmentation), and we never showed exactly the same

Remote Sens. 2020, 12, 1145

8 of 17

this regard, preparing training and validation data are very important steps and should be carried
out very carefully, taking into account the time elapsed since the disturbance event took place and
discrepancies in phenology, which could depend on local landscape conditions.

To tune the architecture of the neural network, we tested the following combinations of parameters
(Algorithm A1, line #24), which correspond to diﬀerent U-Net architectures: num_layers = {64, 32, 16},
depth = {2, 3, 4}, layer_rate = {2, 1.5, 1.2}, batch_norm = {True, False}, residual = {True, False}, dropout
= {0, 0.5}. Thus, we performed a grid search over 216 diﬀerent U-Net-like architectures and found
several of the best ones which are suitable for forest damage segmentation.

All of the best results corresponded to the conﬁguration when the number of layers was equal to
64, and dropout was applied. The best one, whereby an additional batch normalization is applied,
corresponds to the following parameters: num_layers = 64, depth = 4, layer_rate = 2, batch_norm =
True, residual = False, dropout = 0.5.

Remote Sens. 2020, 12, 1145

6 of 17

Training data were generated as batches of size (m, 256, 256, 3), where m is the batch size (m =
20 in our experiments). The batches consisted of sub-images of size 256 × 256 that were randomly
cropped out from the original satellite images presented in Table 1. We had a stream (internally, a
Python generator) of almost never repeated sub-images; these sub-images were combined into batches
and used for the neural network training. Satellite images for sites #1, #3, #5, #7–10 were used for
training and #2, #4, #6 for validation. Corresponding batches of mask data had shape (20, 256, 256, 1).
The network training assessment was performed on sub-images generated from image #2 (Table 1).
Images #4 and #6 were used for visualization and demonstration of the algorithm eﬃcacy.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What is the strategy implemented to monitor the model performance during training?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Answer: The strategy implemented to monitor the model performance during training involves generating batches of training images randomly on the fly from source images. These source images are randomly cropped to a resolution of 256 x 256 and augmented. This approach ensures that the exact same image is never shown twice during training. The training data is generated as batches of size (m, 256, 256, 3), where m is the batch size (m = 20 in their experiments). The corresponding batches of mask data have a shape of (20, 256, 256, 1). The network training assessment is performed on sub-images generated from image #2 (Table 1). Images #4 and #6 are used for visualization and demonstration of the algorithm's efficacy.