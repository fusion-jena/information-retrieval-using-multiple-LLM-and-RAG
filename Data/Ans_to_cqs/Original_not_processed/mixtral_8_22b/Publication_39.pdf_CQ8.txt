Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

All programs use Python 3 and PyTorch (Paszke et al. (2019)) for 
building  and  training  the  networks.  The  Mask  R-CNN  model  is  built 
around  the  PyTorch  detection  model  of  Mask  R-CNN.  For  the  imple-
mentation of FGFA we use the PyTorch models for the backbone, the 
RPN and the head of the implementation of Mask R-CNN model. The 
three ResNet variations are also based on PyTorch detection models. We 
always use the pretrained versions of the detection models. The Mask R- 
CNN  is  pretrained  on  COCO  2017train  dataset.  The  ResNets  are  pre-
trained on Kinetics-400 dataset. We use these PyTorch models because 
they allow more flexibility than other implementations. They are better 
adjusted  to  the  PyTorch  training  functions  and  are  well-arranged. 
Moreover,  the  PyTorch  detection  models  do  not  have  other  de-
pendencies (e.g. special libraries) unlike other implementations. 

4.3. Object detection

4.4. Action recognition 

The three ResNet variants are trained for 40 epochs starting with an 
initial learning rate of 0.001. The learning rate is decreased every 10 
epochs by multiplying it with a γ = 0.1. For optimization we utilize the 
Stochastic  Gradient  Descent  (SGD)  with  a  momentum  of  0.9  and  a 

EcologicalInformatics61(2021)1012158F. Schindler and V. Steinhage

Feichtenhofer et al. (2019). This parameter combination achieved the 
best  results  in  our  experiments.  The  Slow  and  Fast  pathways  are 
implemented by a ResNet-101. 

We  split  the  annotated  dataset  AnnotationsActions  (cf.  Section  2.2) 
randomly (but fixed for all experiments and all networks) into a train set, 
validation set and test set. The test set includes 20% of the video clips of 
each class. Of the remaining clips, again 20% of the clips in each class 
form the validation set. The remaining clips are the training set. 

4.4.1. Data augmentation for action recognition

The SlowFast architecture is trained in 40 epochs with an initial base 
learning rate of 0.1. We use 5 warmup epochs with a warmup learning 
rate of 0.001. Momentum is set to 0.9 and the weight decay parameter is 
(cid:0) 4.  The  learning  rate  is  decreased  with  a  cosine  strategy.  The 
1  ⋅  10
optimization technique is SGD and the loss function is the cross entropy 
loss. In this parameter selection we follow Feichtenhofer et al. (2019). 
We set the temporal length of the input to 16 frames. We set the sam-
pling rate to 4 and α = 2. The parameter β is set to 1/8 as proposed by 

EcologicalInformatics61(2021)1012159F. Schindler and V. Steinhage

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "Where is the code repository of the deep learning pipeline available (e.g., GitHub, GitLab, BitBucket)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Unfortunately, there is no information provided about where the code repository of the deep learning pipeline is available. It could be hosted on platforms such as GitHub, GitLab, or BitBucket, but without explicit mention, I cannot provide a definitive answer. Please refer to any additional resources or documentation associated with this project for further details.

Based on the given context, here is my response:

Answer:::
Answer: Unfortunately, the provided context does not include information regarding the location of the code repository for the deep learning pipeline. Therefore, I am unable to determine whether it is available on platforms like GitHub, GitLab, or BitBucket. To find out where the code repository is located, please consult any related materials or documentation associated with this project.