Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

For training the EF and SN models, we selected the following setup empirically: batch size equal
to 32 with 100 number of epochs, early stopping after 10 epochs with no improvement (over the
validation set) and a dropout rate of 0.2 in the ﬁnal FC layer. Additionally, Adam optimizer was
selected empirically with weight decay equal to 0.9 and learning rate equal to 10−3. As loss function,
we used the binary cross-entropy.

6 of 28

Figure 3. Procedure to train the SVMs ﬁlter bank. Mini-patches are extracted from input patches,
and they are vectorized to compose the training set of SVMs.

2.3.2. Training the SVMs Filter Bank

After the global training set is built, m subsets of N random selected samples are created to train
m SVMs ﬁlters. These m subsets are composed of n samples per class, which are randomly selected
from the global training set. The weights of the SVMs ﬁlters are learned using a conventional forward
supervised learning layer by layer in a greedy fashion. To make the most of available training samples
and to avoid data duplication in the subsets, in our study, the value of n was set to the ratio between
the number of training samples (N) and the amount (m) of SVM ﬁlters.

2.3.3. Generation of Feature Maps

2.3.3. Generation of Feature Maps

In this stage, the input patch pairs are convolved with the learned SVM ﬁlters to generate the
feature maps, which are fed to a pooling layer followed by a non-linear activation function. The output
is the input to the next convolution layer (see Figure 4). The procedure is repeated until the desired
number of layers is reached.

2.3.4. Classiﬁcation

Table 1. Number of samples in the training, validation and test sets for Amazon database.

Set

Tiles

Available Def.
Samples

Available No-def.
Samples

Balanced Samples
(per Class)

Total Samples

Training

Validation

1, 7, 9, 13

5, 12

2706

963

78,431

39,697

Test

2, 3, 4, 6, 8, 10, 11, 14, 15

40,392

1,675,608

8118

2889

-

16,236

5778

1,716,000

The EF network architecture consisted of three convolutional layers (Conv) including the
Rectiﬁed Linear Unit (ReLU), two Max-pooling layers (MaxPool), and two Fully Connected layers
(FC), with a softmax layer at the end with two outputs, corresponding to “deforestation” and
“no-deforestation” classes. The ﬁlter and output size of each layer are summarized in Table 3.

132456789101112131415Remote Sens. 2020, 12, 910

11 of 28

Table 2. Number of samples in the training, validation and test sets for Cerrado database.

Set

Tiles

Available Def.
Samples

Available No-def.
Samples

Balanced Samples
(per Class)

Total Samples

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What optimization techniques are applied in the deep learning pipeline (e.g., SGD, Adam)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Adam optimizer is applied in the deep learning pipeline. This is mentioned in the first piece of context where it states, "Additionally, Adam optimizer was selected empirically...". Adam is a popular optimization algorithm used in deep learning due to its ability to adaptively adjust the learning rate based on the historical gradient information. It combines the advantages of both AdaGrad and RMSProp algorithms, making it suitable for problems with large datasets and high dimensionality. Other optimization techniques such as Stochastic Gradient Descent (SGD) or other variants could also be used depending on the specific requirements and characteristics of the problem being addressed. However, the given context only mentions the use of Adam optimizer.