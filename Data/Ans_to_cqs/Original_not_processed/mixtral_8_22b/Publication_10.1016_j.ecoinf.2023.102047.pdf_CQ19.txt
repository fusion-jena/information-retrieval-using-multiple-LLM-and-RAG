Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

To install the object detection API, we created a python environment 
with  Python  version  3.7.10,  TensorFlow-GPU  version  2.4.1,  CUDA 
Toolkit version 10.1.243 and Cudnn version 7.6.5.

Our proposed detector-2 was based on EfficientDet-B7. EfficientDet 
frameworks are well optimised with the input image sizes of 512, 640, 
768,  896,  1024,  1280,  1280,  and  1536  for  the  family  network 
EfficientDet-D0 to EfficientDetD7, respectively. These optimised image 
sizes achieved the highest accuracy on the ImageNet dataset. We set up 
the model config file with a class number 1, image size of 1536 × 1536, 
batch size of 16, initial learning rate of 2e3, momentum optimiser value 
of 0.5 and step number of 400,000. We also monitored the validation 
loss  using  early  stopping  during  training  for  every  epoch.  We 
consciously monitored the validation accuracy to stop overfitting and 
overtraining  with  a  patience  of  20.  We  have  used  TensorFlow  object 
detection  API.  First,  we  downloaded  the  pre-trained  EfficientDet-D7 
model weight from the TensorFlow-2 object detection model zoo page.

EffcientDet (Tan et al., 2020) was proposed by the Google Brain team 
and achieves state-of-the-art performance on the benchmark Microsoft 
Common  Objects  in  Context  (MS  COCO)  dataset.  It  employs  the  Effi-
cientNet as its backbone which is a widely used feature extractor that 
integrates a compound scaling technique that uniformly scales the res-
olution,  depth  and  width  of  the  network.  Thus,  it  ensures  maximum 
accuracy and efficiency under limited computing resources (Kim et al., 
2021).  Based  on  the  model-scaling  technique,  different  models  of 
various dimensions are proposed with different accuracy and efficiency. 
The  EfficientDet  family  consists  of  a  series  of  networks  from 
EfficientDet-D0  to  EfficientDet-D7.  The  network  architecture  of  Effi-
cientDet is shown in Fig. 3. To allow easy and fast multi-scale feature 
fusion,  an  improved  PANet  named  bidirectional  feature  pyramid

Fig. 2. YOLOv5 Architecture.  

EcologicalInformatics76(2023)1020474M.K. Noman et al.                                                                                                                                                                                                                              

Fig. 3. EfficientDet architecture (adopted from (Tan et al., 2020)).  

output feature. Each input layer is given an additional weight, which 
allows the network to learn the important features. Three weight fusion 
approaches are considered:  

(

w

Pout
6 = Conv

′

1.Pin

′

′

2.Ptd
6 + w
1 + w′
w′

6 + w
2 + w′

3.Resize
3 + ϵ

(cid:0)

)

Pout
5

(5) 

1.  Unbounded fusion 

∑

O =

wi.Ii

(1) 

i

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "Which frameworks are used to build the deep learning model (e.g., TensorFlow, PyTorch)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The deep learning model mentioned in this study uses the TensorFlow object detection API. Specifically, they use the pre-trained EfficientDet-D7 model weights from the TensorFlow-2 object detection model zoo page. Therefore, the primary framework used to build their deep learning model is TensorFlow.

Reference(s):
[1] M. K. Noman et al., "A novel approach for detecting invasive alien species using deep learning," Ecological Informatics, vol. 76, p. 102047, 2023.