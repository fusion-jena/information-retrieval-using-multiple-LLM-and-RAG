Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

App Development: For tree species identiﬁcation in a remote
area, an end-user app is essential. For the app development,
Android Studio [39] was used. The saved models were
converted into the TensorFlow Lite [40] version using the
TensorFlow Lite converter. TensorFlow Lite is a set of tools
to perform deep learning on smartphone and IoT devices. The
architecture of the mobile app is shown in Fig. 4. The squares
marked with dotted red will be included in future iterations.
The size of the models based on MobileNetV3-Large and
MobileNetV3-Small was 4.88 MB and 1.99 MB, respectively,
which are lightweight compared to AlexNet (227.5 MB) [27].
The app is developed using the Java programming language.
The leaf detection module in the app contains a Tensorﬂow
Lite interpreter for the TensorFlow Lite model.
App Testing: For testing the application, Android studio
comes with built-in phone emulators, or the app could be
deployed to an actual device. From an online search, we

Various research studies, reviewed in the next section, aimed
at deep learning methods for plant species identiﬁcation. How-
ever, these studies focused on utilizing complex deep models,
such as InceptionV3, AlexNet, and VGG-16, which require a
considerable number of iterations and computation power to
train the network. Moreover, the existing plant identiﬁcation
applications such as PictureThis [11] and Pl@ntNet [12] de-
pend upon the network connection to evaluate the captured im-
age by analyzing trained models on servers. These applications
fail in remote forestry areas where mobile networks provide
limited/no patchy connection [13]. Due to low power and
computation capabilities, a model with reduced computation

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

gained momentum to determine tree species. Compared to
DNA technologies, computer vision methods are non-intrusive,
which mainly use machine learning algorithms. Many machine
learning methods for tree species classiﬁcation, such as deep
learning models, e.g. Convolutional Neural Networks (CNN),
have been applied to different datasets. The primary advantage
of CNN for image classiﬁcation is that the entire system is
trained completely automatically from raw pixels of images to
eventual categories. These images are acquired using remote
sensing or handheld devices and processed by powerful Cloud-
based machine learning algorithms. We aim at tree species
identiﬁcation using a CNN-based lightweight model, which
could embed within a handheld device resolving computation,
battery and network constraints.

Abstract—Detailed information on tree species constitutes
an essential factor to support forest health monitoring and
biodiversity conservation. Current deep learning-based mobile
applications for tree and plant identiﬁcation require excessive
computation. They largely depend on a network connection to
perform computing tasks on powerful remote servers in the
Cloud. Many forestry areas are remote with limited or no
cellular coverage, which is an obstacle for these applications to
recognize trees and plants in these areas in real-time. This paper
investigates existing CNN-based machine learning applications
for plant
identiﬁcation tailored for handheld device usages.
Driven by network independence, reduced computation, size
and time requirements, we propose the use of MobileNet (a
mobile computer vision architecture) transfer learning to improve
the accuracy of ofﬂine leaf-based plant recognition. We then
carry out experimental validation of state-of-the-art MobileNet.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What is the code repository link of the deep learning pipeline (e.g., Link to GitHub, GitLab, BitBucket)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Unfortunately, there isn't enough context provided to give a specific code repository link for the deep learning pipeline mentioned in this study. However, it can be noted that the authors have used Android Studio for developing their mobile application and TensorFlow Lite for deploying the deep learning models onto the mobile platform. It would be best to contact the authors directly if more detailed information about the code repository is required.