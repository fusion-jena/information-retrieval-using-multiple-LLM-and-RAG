Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Mikolov, T., Sutskever, I., Chen, K., Corrado, G., Dean, J., 2013. Distributed 

representations of words and phrases and their compositionality. ArXiv Preprint.  

Müllner, D., 2013. Fastcluster: fast hierarchical, agglomerative clustering routines for R 

and Python. J. Stat. Softw. 53, 1–18. 

Naili, M., Chaibi, A.H., Ben Ghezala, H.H., 2017. Comparative study of word embedding 
methods in topic segmentation. Proc. Comput. Sci. 112, 340–349. https://doi.org/ 
10.1016/j.procs.2017.08.009.

gen.de/z2/LSAspaces  (Günther  et  al.,  2015).  This  model  has  been 
demonstrated  to  generate  high-quality  performance  with  dense  word 
vectors  and  to  produce  the  best  results  regarding  semantic  similarity 
tasks (Baroni et al., 2014). This space was created using the CBOW al-
gorithm and contains vectors for 300,000 different words, covering a 
broad variety of different topics. It was trained from a 2.8-billion-word 
corpus, a concatenation of the ukWaC corpus (web pages material from . 
uk  domain;  Baroni  et  al.,  2009),  Wikipedia,  and  the  British  National 
Corpus (BNC Consortium, 2007).

Word2vec  is  a  widely  known  word  embedding  technique  (e.g., 
Mikolov et al., 2013; Naili et al., 2017), and has been a successful tool for 
investigating CES from social media data (e.g., Gugulica and Burghardt, 
2023).  Word2vec  can  be  carried  out  in  two  ways:  by  creating  and 
training your own word2vec space based on two different architectures, 
namely, Skip-gram, which predicts the target word based on a nearby 
word, and Continuous Bag-of-Words (CBOW), which learns to predict a 
target word according to its context (Mikolov et al., 2013), or by using 
pre-trained  models (e.g.,  Baroni et al., 2014). Training a new  custom 
word2vec model requires a very large dataset, increases the computa-
tional effort, and could be biased by the geographic origin of the data. 
Therefore,  we  performed  the  semantic  analysis  using  the  pre-trained 
baroni  word2vec  model  provided  at  http://www.lingexp.uni-tuebin

the perceptions mentioned by hikers during their outdoor experience, 
we extracted the most frequent single words (unigrams) from Wikiloc 
posts.  The  extraction  of  unigrams  consisted  of  three  steps:  text  trans-
lation, data pre-processing, and  word frequency  counting. First,  since 
the text description included five different languages (French, English, 
Dutch,  Italian,  and  Spanish),  we  translated  all  text  descriptions  into 
English  using  DeepL  (https://www.deepl.com).  Second,  data  pre- 
processing  consists  of  using  natural  language  processing  (NLP) 
methods  to  perform  automated  text  mining  in  R,  primarily  using  the 
packages  tidytext  (Silge  and  Robinson,  2017)  and  tm  (Feinerer  and 
Hornik, 2018) for tokenization, lemmatization and English stop words 
removal based on a predefined list of common English words (e.g., and, 
the). An additional set of words such as the name of the country, towns,

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "How are the hyperparameters of the model optimized (e.g., grid search, random search)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The given context does not provide information about how the hyperparameters of the model were optimized. Therefore, it cannot be determined whether grid search, random search, or another method was used for optimization.