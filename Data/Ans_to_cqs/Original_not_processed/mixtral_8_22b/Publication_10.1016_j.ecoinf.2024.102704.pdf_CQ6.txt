Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

several  times  higher  than  those  of  other  operations  (Li  et  al.,  2018). 
Therefore,  reducing  memory  access  is  the  key  to  further  enhancing 
model  performance.  By  reconfiguring  the  computation  sequence  of 
‘convolutional layer + batch normalisation + activation layer on NVI-
DIA TESLA V100 GPUs, Wang et al. (2019) reduced memory access by 
33%,  22%,  and  31%  for  the  ResNet-50,  Inception  V3,  and  DenseNet 
models,  respectively,  leading  to  increases  in  the  computational  effi-
ciency  of  20.5%,  18.5%,  and  18.1%.  Lowering  the  memory  access  in 
models can accelerate operations across the three main layers of CNNs, 
thus fully harnessing the model's strengths and more effectively utilising 
the computational resources provided by the embedded devices (Gilan 
et al., 2019; Zhang et al., 2015). Therefore, by reducing the number of 
layers  in  the  network  model,  the  number  of  convolutions  and  data

(n), small (s), medium (m), large (l), and extra-large (x). These scales 
meet the requirements of various scenarios and tasks. As scale increases, 
so does the network depth and width of the model; therefore, ‘n’  rep-
resents the smallest and fastest scale, whereas ‘x’ is the largest and offers 
the  highest  accuracy.  Although  the  accuracy  improves  as  the  model 
depth increases, this also leads to changes in the number of parameters, 
amount  of  computation,  and  detection  speed,  with  correspondingly 
higher demands on the hardware configuration. To delve deeper into the 
underlying causes of enhancing model lightweight and inference speed, 
we utilised LigObNet, YOLOv5, YOLOv6, YOLOv7, and YOLOv8 to train 
across  four  scales:  n,  s,  m,  and  l.  As  Fig.  9  illustrates,  reducing  the 
number  of  parameters  in  the  various  models  does  not  enhance  the 
processing speed. The total parameter count, representing the combined

2.4. Model training 

The  experiments  were  conducted  on  a  Windows  10-based  mobile 
laptop  equipped  with  an  Intel(R)  i7-11800H  CPU  and  a  GeForce 
RTX3080  GPU  with  16GB  of  video  memory.  The  PyCharm  software 
platform was utilised to carry out the experiments, employing Python 
3.8 and the Pytorch 1.9 deep learning framework for training purposes. 
The  details  of  the  specific  environmental  configurations  and  model 
training parameters are listed in Table 1. To enhance detection accuracy, 
this study established detection thresholds of IoU = 0.3 and score = 0.3, 
indicating that a bounding box with a likelihood of containing a fish of 
30% or higher was considered valid and thus retained. 

3. Results 

3.1. LigObNet detection speed and accuracy 

3.1.1.

Impact of C1 module on network layer and inference time

parameters of all the model layers, is linked to the required disk space

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What preprocessing steps are involved before training a deep learning model (e.g., normalization, scaling, cleaning)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Based on the given context, there isn't any explicit information about the preprocessing steps involved before training the deep learning models. However, it is common practice in machine learning and deep learning to perform several preprocessing steps such as normalization, scaling, cleaning, and augmentation. Normalization involves rescaling the input features so they have zero mean and unit variance. Scaling ensures that all features contribute equally to the final output. Cleaning removes noise from the dataset, while augmentation generates new samples by applying transformations like rotation, flipping, zooming, etc. It should be noted that these preprocessing steps may vary depending on the nature of the problem and the type of data used.