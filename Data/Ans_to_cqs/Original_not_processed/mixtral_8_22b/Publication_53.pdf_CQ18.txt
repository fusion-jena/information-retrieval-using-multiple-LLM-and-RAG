Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

of 0.8287. We used the trained model to automatise the classiﬁcation of 500 more images
from the unlabelled training dataset, and we manually ﬁxed any mistakes. We repeated
this process of training, classiﬁcation and checking until all of the 7362 downloaded images
were labelled.

Please refer to Table S1 for details on curator, spatial coverage, temporal coverage,
sample size, data type, ﬁlters, access date and source for all datasets used in this study.
Brieﬂy, we sourced data on 1,694,675 farm dams from (1) the Surface Water map by
Geoscience Australia (N = 934,381), (2) the Department of Environment, Land, Water &
Planning of the Victorian Government (N = 429,398), (3) the Department for Environment
and Water in South Australia (N = 105,361), (4) the Department of Primary Industries and
Regional Development in Western Australia (N = 162,785), (5) the Department of Primary
Industries, Parks, Water and Environment in Tasmania (N = 61,897) and (6) the Environment
& Planning Directorate in the Australian Capital Territory (N = 853). For large farm dams
(>105 m2 in surface area), we removed those that appeared of natural origins (i.e., complex
shapes, jiggered borders) by retaining only those with simple and regular shapes, calculated

To avoid manual labelling of all 7362 downloaded images, we took a random subsam-
ple of 400 images and labelled them into “dam” or “not dam” and we trained a classiﬁcation
model on the labelled data. We utilised transfer learning by initialising an ImageNet pre-
trained ResNet34 model [30]. We applied an 80–20% split for training and validation
datasets, respectively. To help generalise the model, we used data augmentation with the
fastai get_transforms function [30] and the following arguments: “ﬂip_vert = TRUE” to
allow for vertical ﬂipping of images, “max_lighting = 0.02” to limit overly exposing the
images, “max_zoom = 1” to disable the zooming augmentation, and “to_fp16 = TRUE” to
reduce the memory load on the graphical processing unit (GPU). We set the batch size to
300 images and trained the model with a learning rate of 10−3 for ten epochs. At epoch 5,
we achieved an error rate of 0.1538 (15.38%) a validation loss of 0.4211 and a training loss

2.4. Statistical Analyses

We used Python [35] and fastai [30] for developing the deep learning CNN. We used
R [36] for all statistical analyses, using packages sf [37] and raster [38] for data manipulation;
ggplot2 [39], rasterVis [40] and cowplot [41] for plotting. We also used R for designing
the website AusDams.org, using Shiny [42], Leaﬂet [43], Plotly [44] and using Joe Cheng’s
Superzip template (https://shiny.rstudio.com/gallery/superzip-example.html).

3. Results
3.1. Reported Farm Dams

There were 1,694,675 farm dams reported by regional and Federal authorities in
Australia. The majority of farm dams were in New South Wales (37%), Victoria (26%),
Queensland (17%) and Western Australia (10%; Table S1). Around three-quarters of Aus-
tralia recorded at least one dam per 2000 km2, but the typical density near urban centres
was 2–5 farm dams per km2 (Figure 2). The average size of a dam was ca. 1000 m2, ranging
from 100 m2 to >105 m2 (Figure 3).

3.2. Data Veriﬁcation

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What is the strategy implemented to monitor the model performance during training?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The authors utilized an 80-20% split for training and validation datasets, respectively, to monitor the model performance during training. They employed data augmentation techniques such as vertical flipping of images, limiting overexposure, disabling zooming augmentation, and reducing memory load on the GPU. A batch size of 300 images was set, and the model was trained with a learning rate of 10^-3 for ten epochs. At epoch 5, they achieved an error rate of 0.1538 (15.38%) along with a validation loss of 0.4211 and a training loss. This suggests that the authors monitored the model performance through evaluating its error rates, validation losses, and training losses throughout the training process.