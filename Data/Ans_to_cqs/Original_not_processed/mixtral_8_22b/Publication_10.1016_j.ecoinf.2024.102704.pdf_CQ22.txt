Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

The  enhancement  plan  for  the  LigObNet  and  DeepSORT  counting 
methodologies  is  comprehensively  described  in  the  supplementary 
materials. 

2.3. Evaluation indicators 

2.3.1. Detection model evaluation indicator 

This  study  utilised  precision,  recall,  and  mean  average  precision 
(mAP)  as  evaluation  indicators  of  the  model  detection  accuracy.  The 
computational methodology for each metric is detailed in the Supple-
mentary Material. The model's complexity is gauged by the number of 
parameters (Params), giga floating-point operations (GFLOPs), number 
of model network layers (Layers), and frames per second (FPS), whereas 
the memory footprint (memory) assesses the model's size. 

2.3.2. Tracking algorithm evaluation indicator

several  times  higher  than  those  of  other  operations  (Li  et  al.,  2018). 
Therefore,  reducing  memory  access  is  the  key  to  further  enhancing 
model  performance.  By  reconfiguring  the  computation  sequence  of 
‘convolutional layer + batch normalisation + activation layer on NVI-
DIA TESLA V100 GPUs, Wang et al. (2019) reduced memory access by 
33%,  22%,  and  31%  for  the  ResNet-50,  Inception  V3,  and  DenseNet 
models,  respectively,  leading  to  increases  in  the  computational  effi-
ciency  of  20.5%,  18.5%,  and  18.1%.  Lowering  the  memory  access  in 
models can accelerate operations across the three main layers of CNNs, 
thus fully harnessing the model's strengths and more effectively utilising 
the computational resources provided by the embedded devices (Gilan 
et al., 2019; Zhang et al., 2015). Therefore, by reducing the number of 
layers  in  the  network  model,  the  number  of  convolutions  and  data

(n), small (s), medium (m), large (l), and extra-large (x). These scales 
meet the requirements of various scenarios and tasks. As scale increases, 
so does the network depth and width of the model; therefore, ‘n’  rep-
resents the smallest and fastest scale, whereas ‘x’ is the largest and offers 
the  highest  accuracy.  Although  the  accuracy  improves  as  the  model 
depth increases, this also leads to changes in the number of parameters, 
amount  of  computation,  and  detection  speed,  with  correspondingly 
higher demands on the hardware configuration. To delve deeper into the 
underlying causes of enhancing model lightweight and inference speed, 
we utilised LigObNet, YOLOv5, YOLOv6, YOLOv7, and YOLOv8 to train 
across  four  scales:  n,  s,  m,  and  l.  As  Fig.  9  illustrates,  reducing  the 
number  of  parameters  in  the  various  models  does  not  enhance  the 
processing speed. The total parameter count, representing the combined

91.1 
91.8 
89.0 
85.7 
86.5 
91.2 
90.5 
88.3 
90.6 
90.8 

88.3 
87 
87.9 
82.5 
86.4 
85.1 
86.9 
85.7 
85.4 
88.5 

92.9 
92.5 
92.8 
90.4 
91.9 
91.1 
92.1 
91.6 
92.7 
93.1  

Fig. 3. Optimization of detection accuracy and inference speed by C1 module. (a) Model complexity histogram and (b) model accuracy and inference speed chart.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What metrics are used to evaluate the performance of the deep learning model (e.g., accuracy, precision, recall)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
In evaluating the performance of a deep learning model, several metrics are commonly employed. This study specifically uses precision, recall, and mean average precision (mAP) as evaluation indicators of the model detection accuracy. Precision refers to the ratio of correctly predicted positive observations to the total predicted positives. Recall, on the other hand, measures the proportion of actual positives that were identified correctly. Mean Average Precision (mAP) is a measure of how well the model performs when it comes to predicting multiple classes or labels. It calculates the average precision value for recall values between 0 and 1. The computational methodology for each of these metrics is detailed in the supplementary materials.