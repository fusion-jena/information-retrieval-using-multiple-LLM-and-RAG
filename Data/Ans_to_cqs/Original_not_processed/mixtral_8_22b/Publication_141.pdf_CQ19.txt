Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

The implementation of the CNN classiﬁer was done in Python
programming language (https://www.python.org/), using the
Keras high level deep learning library (https://keras.io/), and Ten-
sorFlow with graphical processing unit (GPU) execution as the
back-end engine (https://www.tensorﬂow.org/). The regions of
the images most informative for the decision making process in
the deep learning model were visualized using Gradient-
weighted Class Activation Mapping (Grad-CAM; (Selvaraju et al.,
2017)). As an output, heatmaps were generated that indicated
important aspects of the each head capsule used to determine
the taxonomic decision-making process of the model.

3. Results

3.1. Classiﬁcation results

2014), which is suggested for relatively small datasets such as ours
(Ng et al., 2015; Peng et al., 2018). The CNN model (Fig. 2) is trained
using a two-stage process. In the ﬁrst stage only a top classiﬁer
(fully connected layer) is trained based on features extracted from
processing images with a pretrained convolutional part of the net-
work. In the second stage, an adjustment of the network in a ﬁne-
tuned manner (using smaller learning rates) is done by training it
as a whole. A two phase approach was used to speed up the process
by preserving pretrained encoder weights in the ﬁrst phase of the
training and achieve optimal model performance using the second
phase. We also applied data augmentation by randomly deforming
input images in each training cycle due to the small sample size.
Additionally, dropout techniques (Hinton et al., 2012) were applied
to extracted features to enhance model robustness.

ImageNet) (Russakovsky et al., 2015). Since 2012, there has been
signiﬁcant improvement in deep learning CNN architectures that
have led to better classiﬁcation results in the ImageNet challenge.
Here lies an opportunity to use a similar structure and approach
for targeted application in biomonitoring studies that could incor-
porate high-resolution information from the Chironomidae in
inferences of ecosystem integrity.

Fig. 2. Architecture of the proposed CNN model, where input images of 512x512
pixels with 3 colour channels are transformed into a 2048 feature vector that is
subject to classiﬁcation using the fully connected layer. A normalized exponential
function (softmax) then takes the input vector and normalizes it into a probability
distribution to determine the probability for each class.

CNN, while the remaining 20% were used for validation of the
model. The 80:20 split of the image data was carried out per cate-
gory (chironomid taxa), where each ﬁfth image was chosen for the
validation dataset (Table 1).

4. Discussion

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "Which frameworks are used to build the deep learning model (e.g., TensorFlow, PyTorch)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
Answer: The deep learning model was built using several frameworks and libraries. The primary programming language used was Python. For building the deep learning model, the Keras high-level deep learning library was utilized. Additionally, TensorFlow served as the backend engine for GPU execution. These tools were instrumental in implementing the Convolutional Neural Network (CNN) classifier.