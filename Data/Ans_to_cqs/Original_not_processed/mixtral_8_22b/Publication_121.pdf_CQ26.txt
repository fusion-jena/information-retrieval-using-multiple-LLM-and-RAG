Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

A. Transfer Learning from Pre-trained Models

When data used to train deep learning networks is not
enough, and it is expensive to create labelled data, transfer
learning, a promising paradigm,
is applied to acquire the
knowledge learned in previous settings. The most common
strategies of transfer learning are feature extraction and ﬁne-
tuning. For feature extraction, input data is provided to the
pre-trained model, and activation values of many layers are
stored to use as features. For ﬁne-tuning, the initial layers
of the model are ﬁxed, and the ﬁnal layers of the model

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply. 

Fig. 1. Transfer Learning of MobileNet-based Model for Leaf Classiﬁcation.

models, pre-trained on 1.4M images from 1000 classes. First,
the intermediate layer of all the models was selected to use
for feature extraction. For this purpose, the output of the last
layer (bottleneck layer) is commonly used prior to the ﬂatten
operation. The reason is that all the fully connected layers
are specialized to the task network was trained on; thus, the
features learned by these layers will not be useful for the new
task. The bottleneck features are more generic. Therefore, the
base models were frozen, loaded with weights trained on the
ImageNet dataset and used as a feature extractor. We added
a dropout layer with a dropout rate of 0.2 to reduce the
overﬁtting of the model. Finally, the top classiﬁer softmax
layer was added for predicting the class for an input image.
The model with the base model of MobileNetV2 was compiled
and optimized with Adam optimizer. The other with the base
model of MobileNetV3 were optimized with Gradient descent

CNN comes with the disadvantages of a huge number
of labelled training samples requirement for weighting pa-
rameters and powerful GPUs for a faster learning process.
With limited training samples, learning too many parameters
directly will result in overﬁtting even after using over-ﬁtting
prevention techniques such as Dropout [7]. Overﬁtting of a
machine learning model includes more terms and uses more
complicated approaches than necessary [8]. To make deep
CNN ﬁt for small datasets while keeping high accuracy is
a challenge. To overcome this challenge, transfer learning [9]
offers the solution, which implies reusing previously attained
knowledge in similar tasks. Some studies analyzed the use
of transfer learning for many deep learning algorithms. These
evaluations [10] concluded that transfer learning improves the
accuracy of deep learning models, which apply deep features
and ﬁne-tuning.

D. Model Training

Feature Extraction: The hardware to train the model included
a Lenovo laptop equipped with an 8265U CPU at 1.80 GHz
of Intel Core i5, 8 GB of RAM running on a Windows 10 64-
bit system. The software tools included Annaconda3 Jupyter
Notebook with Python 3.8, where the Tensorﬂow, OpenCV-
python3 [37] and Keras [38] libraries were used. The dataset
was divided in a ratio of 75:25 into a training set of 5789
images and a test set of 1930 images. To obtain the pre-
trained weight parameters, we built the base models from the
MobileNetV2, MobileNetV3-Large and MobileNetV3-Small

Authorized licensed use limited to: Thueringer Universitaets. Downloaded on August 29,2024 at 05:51:17 UTC from IEEE Xplore.  Restrictions apply.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What techniques are used to address data bias during preprocessing of the deep learning pipeline (e.g., Stratified splitting, oversampling, undersampling, Diverse data collection)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
In addressing data bias during preprocessing of the deep learning pipeline, several techniques can be employed. One approach is stratified splitting, which involves dividing the dataset into subsets based on specific criteria or characteristics. This ensures that each subset maintains the same proportional representation of the original dataset, thereby reducing potential biases introduced through random sampling.

Oversampling and undersampling are also effective strategies to mitigate data imbalance issues. Oversampling increases the size of minority classes by duplicating existing instances or generating synthetic examples, whereas undersampling reduces majority classes by randomly removing instances. Both methods aim to achieve balanced distributions across different categories within the dataset.

Additionally, diverse data collection plays a crucial role in minimizing data bias. By gathering information from various sources and perspectives, researchers can ensure their datasets encompass a wide range of scenarios and conditions. This comprehensive coverage helps prevent any single factor or group from dominating the analysis results, ultimately leading to more accurate and reliable outcomes.

However, it should be noted that none of these techniques alone guarantees complete elimination of data bias. A combination of multiple strategies tailored to the specific requirements and constraints of individual projects often yields optimal results. Furthermore, continuous monitoring and evaluation throughout the entire deep learning pipeline remain essential to maintain high-quality data and robust performance.