Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

sifiers, that can be tailored for specific research questions. In addition, 
training data in which the target class makes up a small proportion of 
text generally leads to poor classification performance, as demonstrated 
with web articles for classification task 2 in this study (Fig. 3). Never-
theless, although not applied in our pipeline, augmenting training data 
by  oversampling  of  the  minority  class  can  help  to  alleviate  this  issue 
(Padurariu and Breaban, 2019).

Here,  we  demonstrate  and  evaluate  a  text  classification  pipeline, 
designed to address both the issue of imbalanced datasets and the need 
for large training datasets, using an example data collection scenario. 
Importantly,  we  use  a  hierarchical  classification  approach,  whereby 
data are passed through a series of classifiers with increasingly specific

Obtaining a sufficient volume of ‘gold-standard’ training data is in-
tegral to achieving high performance in machine learning applications: 
this was also reflected in our experimental results. However, although 
the burden of manual annotation has often been cited as a barrier to the 
use of custom text classifiers in online data collection (Kulkarni and Di 
Minin,  2021),  our  study  indicates  that  the  fine-tuning  of  pre-trained 
language  models  can  achieve  classification  accuracy  of  >85%  with 
<500  training  examples  (Fig.  4).  As  also  noted  by  Stringham  et  al. 
(2021a),  beyond  the  ‘peak’  number  of  training  examples,  model  per-
formance is likely determined by the nature of the textual data and the 
model, rather than the volume of training data. Again, this emphasises 
that, for clearly defined classification tasks, transformer-based models 
provide the opportunity to rapidly develop high-performing text clas-

Since BERT can only accept a maximum of 512 tokens as input, we 
used smaller subsections of the longer web articles as classifier input, an 
approach previously applied to long document classification (Fiok et al., 
2021; Sun et al., 2019). To identify the sections of text most likely to be 
relevant to the classification decision, documents were split into chunks 
of 300 tokens using the NLTK word-tokenizer. Chunks that contained 
any  of  our  original  query  terms  (i.e.  any  bat-related  or  exploitation- 
related  term)  were  retained.  If  more  than  one  chunk  contained  key-
words,  the  first  such  chunk  of  the  document  was  retained  for  use  in 
model training and evaluation. Before being fed into the BERT model, 
texts are tokenized using the BERT tokenizer. Here, we set the maximum 
number of tokens as 400 for social media posts, as most were very short, 
and 512 for web articles, meaning some texts would have been further 
truncated at this step.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "What are the regularization methods used to prevent overfitting in the deep learning pipeline (e.g., dropout, L2 regularization)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer: The given context does not provide information on the regularization methods used to prevent overfitting in the deep learning pipeline. Therefore, I cannot provide a helpful answer based solely on the given context.