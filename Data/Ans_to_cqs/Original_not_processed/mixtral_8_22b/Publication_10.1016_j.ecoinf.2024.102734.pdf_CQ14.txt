Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

Grid view mode presents all five-second segments to the user as a grid
shown in Fig. 7. Samples are again ordered by the recommender. This is
an efficient method of quickly annotating recordings. The user can hover
over the spectrogram to play the sample and define on-click keys to
quickly apply labels.

By default, this method assigns samples to training or validation sets,
automatically maintaining an 80/20% training-validation split for each
class. Model prototypes are updated automatically and the user can
trigger model training and view training metrics through the training
tab. Training is mostly automated to make the methodology accessible
to all and does not require deep learning knowledge. We define seg-
mentation and classification endpoints so that users wanting to adapt
the pipeline can define their own segmentation and classification
models.

Feature extraction model selection is evaluated in Section 4.1.

samples (red line) compared to randomly ordered samples, no active
learning (blue line), and active learning using high-certainty samples
(yellow line). The baseline accuracy is calculated using a 2-shot, 2-way
test accuracy without fine-tuning (81.4%). The AST feature extraction
model is fine-tuned on a subset of 500 training samples. Model perfor-
mance is re-evaluated on the test set at 10 sample increments using each
of the three sample orderings. Low certainty refers to queries with a
similar Euclidean distance to prototypical embeddings and therefore lie
along decision boundaries. For high-certainty samples, the order is
reversed with query embedding in close proximity to prototypical em-
beddings being prioritised for model fine-tuning.

∑

x∈Sd

fθ(x)

3.4. Active learning

(1)

A recommender system, Fig. 4, ranks segment embeddings in order
of lowest certainty to highest certainty. Low-certainty embeddings
correspond to features on decision boundaries. The Euclidean distance ld
is computed between existing prototypes cd and the query embeddings q
providing both class suggestion and class probability using P(q ∈ d | ld)
= softmax(1 (cid:0) norm(ld)). The recommender ranks queries in terms of

This methodology has been implemented into the Listening Lab
Annotator Tool (McEwen et al., 2023b), shown in Fig. 5. The following
section demonstrates the functionality of the annotator and methodol-
ogy workflow.

Question: %INSTRUCTIONS:
Use the provided pieces of context to answer the query in less than 400 words. If you don't know the answer, just say that you don't know, don't try to make up an answer.

%Query
Query: "How are the hyperparameters of the model optimized (e.g., grid search, random search)?"

Provide your answer as follows:

Answer:::
Answer: (provide your answer to query in less than 400 words)

Answer:::

Helpful Answer:
The given context does not provide information about how the hyperparameters of the model are optimized. Therefore, it cannot be determined whether grid search, random search, or any other optimization technique is used.